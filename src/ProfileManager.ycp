/**
 * File:	modules/ProfileManager.ycp
 * Package:	Configuration of profile-manager
 * Summary:	Data for configuration of profile-manager, input and output functions.
 * Authors:	Jiri Suchomel <jsuchome@suse.cz>
 *
 * $Id$
 *
 * Representation of the configuration of profile-manager.
 * Input and output routines.
 */

{

module "ProfileManager";
textdomain "profile-manager";

import "Progress";
import "Report";
import "Summary";

//include "./routines.ycp";
include "profile-manager/routines.ycp";

global boolean first_time = false; // to some file!
global boolean enabled = false;
global boolean close_popups = false;

global map profiles = $[];
// global map profiles = $[ "prvni": "popis prvniho", "zweite":"", "third_profile": "This is the long description of the third profile. It it long, because I would like to see the table with the long descriptions." ];

global map profile_settings = $[];

global string active_profile = "";
global string selected_profile = "";

global string current_resources = "";//"typical";

global list resource_sets_predefined = [];//[ "typical", "network_only" ];
global list resource_sets_individual = [];//[ "my_lovely_one" ]; // user cannot create this !

global map switch_info = $[];
global string profile_action = nil;

/**
 * Abort function
 * return boolean return true if abort
 */
global block AbortFunction = nil;

/**
 * Data was modified?
 */
global boolean modified = false;

global boolean proposal_valid = false;
global boolean write_only = false;

/**
 * Data was modified?
 * @return true if modified
 */
global define boolean Modified() ``{
    y2debug("modified=%1",modified);
    return modified;
};


/**
 * Read all profile-manager settings
 * @return true on success
 */
global define boolean Read() ``{

    /* Xprofile-manager read dialog caption */
    string caption = _("Initializing profile-manager configuration");

    integer steps = 5;

    integer sl = 0;
    sleep(sl);


    Progress::New( caption, " ", steps, [
	    _("Read the SCPM state"),
	    _("Read the list of profiles"),
	    _("Read the profiles descriptions"),
	    _("Read current resource set"),
	], [
	    _("Reading the SCPM state..."),
	    _("Reading the profiles..."),
	    _("Reading the profiles descriptions..."),
	    _("Reading current resource set..."),
	    _("Finished")
	],
	""
    );


/*
    first_time = SCR::Read(.target.yast2, "scpm.ycp");
    if (first_time) {
        SCR::Write(.target.yast2, "scpm.ycp",false);
    }*/

    SCR::Execute (.target.bash, "/bin/touch /var/lib/YaST2/scpm.ycp");
    map state = SCR::Read (.target.ycp, "/var/lib/YaST2/scpm.ycp");

    if (state == nil || state == $[]) {
        state = $[];
        first_time = true;
        state = add (state, "first_time", false);
        state = add (state, "close_popups", false);
        SCR::Write(.target.ycp, "/var/lib/YaST2/scpm.ycp", state);
    }
/*
    first_time = SCR::Read(.target.ycp, "/tmp/scpm.ycp");
    if (first_time) {
        SCR::Write(.target.ycp, "/tmp/scpm.ycp",false);
    }*/

    // read
    if(Abort()) return false;
    Progress::NextStage();
    if(!ReadSCPMStatus()) Report::Error(_("Can not read SCPM status!"));
    sleep(sl);

    // read
    if(Abort()) return false;
    Progress::NextStage();
    if(!ReadProfiles()) Report::Error(_("Can not read profiles!"));
    sleep(sl);

    // read
    if(Abort()) return false;
    Progress::NextStep();
    if(!ReadProfilesDescriptions()) Report::Error(_("Can not read profiles descriptions!"));
    sleep(sl);

    // read current resources
    if(Abort()) return false;
    Progress::NextStage();
    if(!ReadCurrentResources()) Report::Error(_("Can not read current resources!"));
    sleep(sl);

    if(Abort()) return false;
    ProgressNextStage(_("Finished"));
    sleep(sl);

    if(Abort()) return false;
    modified = false;
    return true;
}

/**
 * Write all profile-manager settings
 * @return true on success
 */
global define boolean Write() ``{

    string caption = _("Saving profile-manager configuration");

    integer steps = 1;

    integer sl = 0;
    sleep(sl);

    /*
    Progress::New(caption, " ", steps, [
	    _("Write the settings"), // we should also save "close popups" check
	], [
	    _("Writing the settings..."),
	    _("Finished")
	],
	""
    );

    // write settings
    if(Abort()) return false;
    Progress::NextStage();
    if(false) Report::Error (_("Can not write settings!"));
    sleep(sl);

    if(Abort()) return false;
    ProgressNextStage(_("Finished"));
    sleep(sl);

    if(Abort()) return false;*/
    return true;
}

/**
 * Get all profile-manager settings from the first parameter
 * (For use by autoinstallation.)
 * @param settings The YCP structure to be imported.
 * @return boolean True on success
 */
global define boolean Import (map settings) ``{
    // TODO FIXME: your code here (fill the above mentioned variables)...
    sleep(3000);
    return true;
}

/**
 * Dump the profile-manager settings to a single map
 * (For use by autoinstallation.)
 * @return map Dumped settings (later acceptable by Import ())
 */
global define map Export () ``{
    // TODO FIXME: your code here (return the above mentioned variables)...
    sleep(3000);
    return $[];
}

/**
 * @return true on success
 */
define boolean ReadProfiles() ``{

    list profiles_l = SCR::Read(.scpm.profiles);

    foreach (`profile, profiles_l, ``{
        profiles = add (profiles, profile, "");
    });

    active_profile = SCR::Read(.scpm.profiles.current);
    return true;
}

/**
 * @return true on success
 */
define boolean ReadProfilesDescriptions() ``{

    // read the descriptions of each profile
    map profilesm = profiles;

    foreach (`profile, `d, profilesm, ``{
        string desc = SCR::Read(.scpm.profiles.description, profile);
        profiles = add (profiles, profile, desc);
    });
    return true;
}

/**
 * @return true on success
 */
define boolean ReadSCPMStatus() ``{

    enabled = SCR::Read(.scpm.status.enabled);
    return true;
}


/**
 * @return true on success
 */
define boolean ReadCurrentResources() ``{

    // reads the current res
    current_resources = SCR::Read(.scpm.resources.current);
    return true;
}

global define boolean ReadResourceSets() ``{

    list sets = [];
    sets = SCR::Read(.scpm.resources);
    resource_sets_predefined = select (sets, 0, []);
    resource_sets_individual = select (sets, 1, []);
    return true;
}


/**
 * @return true on success
 */
global define boolean GetProfile() ``{

    // read the profile settings (we already have descriptions)

    profile_settings = add (profile_settings, "name", selected_profile);
    profile_settings = add (profile_settings, "description", lookup(profiles, selected_profile,""));


    profile_settings = add (profile_settings, "prestart",
        SCR::Read(.scpm.profiles.prestart, selected_profile));
    profile_settings = add (profile_settings, "poststart",
        SCR::Read(.scpm.profiles.poststart, selected_profile));
    profile_settings = add (profile_settings, "prestop",
        SCR::Read(.scpm.profiles.prestop, selected_profile));
    profile_settings = add (profile_settings, "poststop",
        SCR::Read(.scpm.profiles.poststop, selected_profile));

    return true;
}

global define boolean AddProfile(string name) ``{

    profiles = add (profiles, name, "");

    SCR::Execute(.scpm.profiles.add, name);
    return true;
}

global define boolean CopyProfile(string source, string new) ``{

    profiles = add (profiles, new, "");

    SCR::Execute(.scpm.profiles.copy, source, new);
    return true;
}

global define boolean RenameProfile(string old, string new) ``{

    string desc = lookup(profiles, old, "");
    profiles = filter (`name, `desc, profiles, ``(name != old));
    profiles = add (profiles, new, desc);
    if (active_profile == old)
        active_profile = new;

    SCR::Execute(.scpm.profiles.rename, old, new);
    return true;
}


global define boolean SetProfile(string name) ``{

    string desc = deletechars(lookup(profile_settings, "description",""), "\n");
    profiles = add (profiles, name, desc);

    SCR::Write(.scpm.profiles.description, desc, name);
    SCR::Write(.scpm.profiles.prestart,
        lookup(profile_settings, "prestart",""), name);
    SCR::Write(.scpm.profiles.poststart,
        lookup(profile_settings, "poststart",""), name);
    SCR::Write(.scpm.profiles.prestart,
        lookup(profile_settings, "prestop",""), name);
    SCR::Write(.scpm.profiles.prestart,
        lookup(profile_settings, "poststop",""), name);

    return true;
}


global define boolean SetSecure() ``{

    // set file permitions

    return true;
}


global define boolean DeleteProfile(string to_delete) ``{

    profiles = filter (`name, `desc, profiles, ``(name != to_delete));
    SCR::Execute(.scpm.profiles.delete, to_delete);
    return true;
}

global define boolean PrepareSwitch() ``{

    /* I should get the map like this:
    map sw_i = $[ "profile_modified": true,
                  "profile_name": selected_profile,
                  "modified_resources": [
                        $[ "resource_name": "sendmail",
                           "resource_type": "service",
                           "is_new": false,
                           "is_deleted": true,
                           "save": false ],
                        $[ "resource_name": "/etc/sendmail.cf",
                           "resource_type": "file",
                           "is_new": false,
                           "is_deleted": false,
                           "save": true ]
                  ]
                ];*/


    switch_info = SCR::Execute(.scpm.switch.prepare, selected_profile);
    y2milestone("switch_info: %1",switch_info);

}

global define boolean SaveSwitchInfo() ``{

    list resources = lookup(switch_info, "modified_resources",[]);
    list saved_resources = [];

    foreach (`resource, resources, ``{
        resource = add(resource, "save", true);
        saved_resources = add(saved_resources,resource);
    });

    switch_info = add(switch_info,"modified_resources",saved_resources);

    y2milestone("switch_info:%1", switch_info);

    return true;
}

global define boolean DropSwitchInfo() ``{

    list resources = lookup(switch_info, "modified_resources",[]);
    list saved_resources = [];

    foreach (`resource, resources, ``{
        resource = add(resource, "save", false);
        saved_resources = add(saved_resources,resource);
    });

    switch_info = add(switch_info,"modified_resources",saved_resources);

    y2milestone("switch_info:%1", switch_info);

    return true;
}

global define boolean Switch() ``{

    SCR::Execute(.scpm.switch, switch_info);

    active_profile = selected_profile;

}

global define boolean WriteStatus() ``{

    SCR::Write(.scpm.status.enabled, enabled);
    if (enabled) // this should be on some other place
    {
        ReadProfiles();
        ReadProfilesDescriptions();
        ReadCurrentResources(); //not necessary
    }

}

global define boolean WriteResources(string resource_set) ``{

    SCR::Write(.scpm.resources.current, resource_set);

}

global define boolean RunIntro() ``{

    SCR::Execute(.target.bash,"konqueror info:/scpm/introduction &");
}

global define string ShowChanges(integer resource_no) ``{

    list resources = lookup (switch_info, "modified_resources", []);

    map resource = select (resources, resource_no, $[]);

    string name = lookup(resource, "resource_name","");
    string type = lookup(resource, "resource_type","");

    SCR::Execute(.scpm.profiles.changes, type, name); // some other path?
    // read -> string (ze streamu!)

    return name + "(" + type + ")" + "<br> not implemented yet";
}

global define list GetProfilesAsItems() ``{

    list items = [];
    items = maplist (`name, `descr, profiles, ``{
        if (name == active_profile)
            return `item(`id(name),"---->",name,descr);
        else
            return `item(`id(name),"",name,descr);
    });
    return items;
}

global define list GetResourcesAsItems() ``{

    list resources = lookup (switch_info, "modified_resources", []);
    list items = [];
    integer i = 0;

    foreach (`resource, resources, ``{
        string flag = "";
        if (lookup(resource,"is_new",false))
            flag = "NEW";
        else if(lookup(resource,"is_deleted",false))
            flag = "DELETED";


        items = add(items, `item(`id(i),
                                 lookup(resource,"save",false)? "X":"",
                                 flag,
                                 lookup(resource,"resource_name",""),
                                 lookup(resource,"resource_type","")));
        i = i + 1;
    });
    return items;
}

global define boolean CheckNameValidity(string name) ``{

    if (size(name) < 1)
        return false;
    if (name != filterchars(name,"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ1234567890-_."))
        return false;
    string first = substring(name,0,1);
    if (size(deletechars(first,"-_.")) <1)
        return false;
    return true;
}

global define boolean CheckFilesValidity(map new_settings) ``{

    return true;
}

global define boolean ModifiedSettings(map new_settings) ``{

    boolean ret = false;

    foreach (`type, `value, profile_settings, ``{
        if (type != "name")
            if (value != lookup(new_settings, type, "")) ret = true;
    });

    return ret;
}

/* EOF */
}
