/**
 * File:	modules/ProfileManager.ycp
 * Package:	Configuration of profile-manager
 * Summary:	Data for configuration of profile-manager, input and output functions.
 * Authors:	Jiri Suchomel <jsuchome@suse.cz>
 *
 * $Id$
 *
 * Representation of the configuration of profile-manager.
 * Input and output routines.
 */

{

module "ProfileManager";
textdomain "profile-manager";

import "Progress";
import "Report";
import "Summary";

include "profile-manager/routines.ycp";

/**
 * Is the module runing for the first time?
 */
global boolean first_time = false;

/**
 * Is SCPM enabled?
 */
global boolean enabled = false;

/**
 * Is SCPM initialized?
 * This is set to true after first enabling.
 */
global boolean initialized = false;

/**
 * Is set "close popups automaticaly" check?
 */
global boolean close_popups = false;

global boolean auto = false;

/**
 * Map of actual profiles and its descriptions.
 * It is read in ReadProfiles() and ReadProfilesDescription().
 * @example
 *  $[ "default" : "This is the default",
 *     "home" : "My home profile",
 *   ...
 *  ]
 */
global map profiles = $[];

/**
 * Map of selected profile's settings.
 * It is read in GetProfile() and written in SetProfile().
 * @example
 *  $[ "name" : "home",
 *     "description" : "My home profile",
 *     "prestart" : "",
 *     "postart" : "/tmp/poststart_script",
 *     "prestop" : "",
 *     "poststop" : ""
 *  ]
 */
global map profile_settings = $[];

/**
 * The name of current resource set.
 * It is read in ReadCurrentResource().
 */
global string current_resources = "";

/**
 * This is the name of the active profile.
 * It is read in ReadActiveProfile().
 */
global string active_profile = "";

/**
 * This is the name of the profile selected in some widget.
 */
global string selected_profile = "";

/**
 * The list of predefined resource sets.
 * @example
 *  [ "typical",
 *    "network_only"
 *  ]
 */
global list resource_sets_predefined = [];

/**
 * The list of user defined resource sets.
 */
global list resource_sets_individual = [];

/**
 * This map represents the switch_info struct.
 * It is read in PrepareSwitch() and used by Switch().
 * @example
 */
global map switch_info = $[];

/**
 * This variable defines the action whis will be done
 * with the profile in the ProfileSettingsDialog.
 * Can be "new", "copy" or "edit".
 */
global string profile_action = "";

/**
 * In this map are written the variables close_popups and first_time.
 * It is read from the file in ReadUserSettings()
 * and written to the file in WriteUserSettings().
 */
global map state = $[];

global integer progress_size = 0;

global string progressfile = "/scpm.progress"; // same name uses agent!
global string hashfile = "/scpm.hash";
global string changesfile = "/scpm.changes";
global string progresspath = "";
global string hashpath = "";
global string changespath = "";

/**
 * Abort function
 * return boolean return true if abort
 */
global block AbortFunction = nil;

/**
 * Data was modified?
 */
global boolean modified = false;

global boolean proposal_valid = false;
global boolean write_only = false;


/**
 * Read all profile-manager settings
 * @return true on success
 */
global define boolean Read() ``{

    // profile-manager Read dialog caption:
    string caption = _("Initializing profile-manager configuration");

    integer steps = 8;

    integer sl = 10;
    sleep(sl);


    Progress::New( caption, " ", steps, [
		// progress stage
	    _("Initialize SCPM"),
		// progress stage
	    _("Read the SCPM state"),
		// progress stage
	    _("Read the list of profiles"),
		// progress stage
	    _("Read active profile"),
		// progress stage
	    _("Read the profiles descriptions"),
		// progress stage
	    _("Read current resource set"),
		// progress stage
	    _("Read user settings"),
	], [
		// progress stage
	    _("Initializing SCPM..."),
		// progress stage
	    _("Reading the SCPM state..."),
		// progress stage
	    _("Reading the profiles..."),
		// progress stage
	    _("Reading active profile..."),
		// progress stage
	    _("Reading the profiles descriptions..."),
		// progress stage
	    _("Reading current resource set..."),
		// progress stage
	    _("Reading user settings..."),
		// progress stage
	    _("Finished")
	],
	""
    );



    // initialize
    if(Abort()) return false;
    Progress::NextStage();
    if(!Initialize())
    {
		// Error message:
		Report::Error(_("Can not initialize SCPM!"));
        return false;
    }
    sleep(sl);

    // read
    if(Abort()) return false;
    Progress::NextStage();
    if(!ReadSCPMStatus())
    {
		// Error message:
		Report::Error(_("Can not read SCPM status!"));
        return false;
    }
    sleep(sl);

    // read
    if(Abort()) return false;
    Progress::NextStage();
	if (enabled)
	    if(!ReadProfiles())
			// Error message:
			Report::Error(_("Can not read profiles!"));
    sleep(sl);

    // read
    if(Abort()) return false;
    Progress::NextStage();
	if (enabled)
	    if(!ReadActiveProfile())
			// Error message:
			Report::Error(_("Can not read active profile!"));
    sleep(sl);

    // read
    if(Abort()) return false;
    Progress::NextStep();
	if (enabled)
	    if(!ReadProfilesDescriptions())
			// Error message:
			Report::Error(_("Can not read profiles descriptions!"));
    sleep(sl);

    // read current resources
    if(Abort()) return false;
    Progress::NextStage();
	if(!ReadCurrentResources())
		// Error message:
		Report::Error(_("Can not read current resources!"));
    sleep(sl);

    // read user settings
    if(Abort()) return false;
    Progress::NextStage();
	if(!ReadUserSettings())
		// Error message:
		Report::Error(_("Can not read user settings!"));
    sleep(sl);

    if(Abort()) return false;
	// progress stage
    ProgressNextStage(_("Finished"));
    sleep(sl);

    if(Abort()) return false;
    modified = false;
    return true;
}

/**
 * Write all profile-manager settings
 * @return true on success
 */
global define boolean Write() ``{

    // profile-manager Write dialog caption:
    string caption = _("Writing profile-manager configuration");

    integer steps = 2;

    integer sl = 10;


    Progress::New(caption, " ", steps, [
        // progress stage:
	    _("Write the SCPM database"), // we should also save "close popups" check
        // progress stage:
        _("Write user settings"),
	], [
        // progress stage:
	    _("Writing SCPM database..."),
        // progress stage:
	    _("Writing the user settings..."),
        // progress stage:
	    _("Finished")
	],
	""
    );

    if(Abort()) return false;
    Progress::NextStage();
    if(!SCR::Write(.scpm, nil))
	    // Error message:
        Report::Error (_("Can not write SCPM database!"));
    sleep(sl);

    if(Abort()) return false;
    Progress::NextStage();
    if(!WriteUserSettings())
	    // Error message:
        Report::Error (_("Can not write user settings!"));
    sleep(sl);

    if(Abort()) return false;
    ProgressNextStage(_("Finished"));
    sleep(sl);

    if(Abort()) return false;
    return true;
}

/**
 * @return true on success
 */
global define boolean ReadProfiles() ``{

    list profiles_l = SCR::Read(.scpm.profiles);

    foreach (`profile, profiles_l, ``{
        profiles = add (profiles, profile, "");
    });

    if (profiles_l == [])
        return false;
    return true;

}

/**
 * @return true on success
 */
global define boolean ReadActiveProfile() ``{

    active_profile = SCR::Read(.scpm.profiles.current);

    if (active_profile == nil)
        return false;
    return true;
}

/**
 * @return true on success
 */
global define boolean ReadProfilesDescriptions() ``{

    // read the descriptions of each profile
    map profilesm = profiles;

    foreach (`profile, `d, profilesm, ``{
        string desc = SCR::Read(.scpm.profiles.description, profile);
        profiles = add (profiles, profile, desc);
    });
    return true;
}

/**
 * @return true on success
 */
define boolean ReadUserSettings() ``{

    SCR::Execute (.target.bash, "/bin/touch /var/lib/YaST2/scpm.ycp");
    state = SCR::Read (.target.ycp, "/var/lib/YaST2/scpm.ycp");

    if (state == nil || state == $[])
		first_time = true;
	else
		close_popups = lookup(state, "close_popups", false);
    return true;
}

/**
 * @return true on success
 */
define boolean Initialize() ``{

    string tmpdir = SCR::Read(.target.tmpdir);
    progresspath = tmpdir + progressfile;
    hashpath = tmpdir + hashfile;
    changespath = tmpdir + changesfile;

    boolean ret = SCR::Execute(.scpm, tmpdir);

    return ret;
}

/**
 * @return true on success
 */
define boolean ReadSCPMStatus() ``{

    list stat = SCR::Read(.scpm.status.enabled);
    if (stat == nil)
        return false;

    enabled = select (stat, 0, false);
    initialized = select (stat, 1, false);
    return true;
}


/**
 * reads the current resource set
 * @return true on success
 */
global define boolean ReadCurrentResources() ``{

    string cur = SCR::Read(.scpm.resources.current);

    if (cur == nil || cur =="")
        return false;

    current_resources = cur;
    return true;
}

/**
 * @return true on success
 */
global define boolean ReadResourceSets() ``{

    list sets = [];
    sets = SCR::Read(.scpm.resources);

    if (sets == nil)
        return false;

    resource_sets_predefined = select (sets, 0, []);
    resource_sets_individual = select (sets, 1, []);
    return true;
}


/**
 * @return true on success
 */
global define boolean GetProfile() ``{

    // read the profile settings (we already have descriptions)

    profile_settings = add (profile_settings, "name", selected_profile);
    profile_settings = add (profile_settings, "description", lookup(profiles, selected_profile,""));

    profile_settings = add (profile_settings, "prestart",
        SCR::Read(.scpm.profiles.prestart, selected_profile));
    profile_settings = add (profile_settings, "poststart",
        SCR::Read(.scpm.profiles.poststart, selected_profile));
    profile_settings = add (profile_settings, "prestop",
        SCR::Read(.scpm.profiles.prestop, selected_profile));
    profile_settings = add (profile_settings, "poststop",
        SCR::Read(.scpm.profiles.poststop, selected_profile));

    return true;
}

/**
 * @return true on success
 */
global define boolean AddProfile(string name) ``{

    boolean ret = SCR::Execute(.scpm.profiles.add, name, auto);
    if (ret)
        profiles = add (profiles, name, "");

    return ret;
}

/**
 * @return true on success
 */
global define boolean CopyProfile(string source, string new) ``{

    boolean ret = SCR::Execute(.scpm.profiles.copy, source, new);
    if (ret)
        profiles = add (profiles, new, "");

    return ret;
}

/**
 * @return true on success
 */
global define boolean RenameProfile(string old, string new) ``{


    boolean ret = SCR::Execute(.scpm.profiles.rename, old, new);
    if (ret)
    {
        string desc = lookup(profiles, old, "");
        profiles = filter (`name, `desc, profiles, ``(name != old));
        profiles = add (profiles, new, desc);
        if (active_profile == old)
            active_profile = new;
    }
    return ret;
}


/**
 * @return true on success
 */
global define boolean SetProfile(string name) ``{

    string desc = deletechars(lookup(profile_settings, "description",""), "\n");
    profiles = add (profiles, name, desc);

    boolean ret = SCR::Write(.scpm.profiles.description, desc, name);
    ret = ret &&  SCR::Write(.scpm.profiles.prestart,
        lookup(profile_settings, "prestart",""), name);
    ret = ret &&  SCR::Write(.scpm.profiles.poststart,
        lookup(profile_settings, "poststart",""), name);
    ret = ret &&  SCR::Write(.scpm.profiles.prestop,
        lookup(profile_settings, "prestop",""), name);
    ret = ret &&  SCR::Write(.scpm.profiles.poststop,
        lookup(profile_settings, "poststop",""), name);

    return ret;
}


/**
 * @return true on success
 */
global define boolean SetFilePermitions() ``{

	string file = "";
	file = lookup(profile_settings, "prestart","");
	if (file != "" &&
		(SCR::Execute (.target.bash, sformat("/bin/chmod 700 %1",file))) != 0)
	return false;

	file = lookup(profile_settings, "poststart","");
	if (file != "" &&
		(SCR::Execute (.target.bash, sformat("/bin/chmod 700 %1",file))) != 0)
	return false;

	file = lookup(profile_settings, "prestop","");
	if (file != "" &&
		(SCR::Execute (.target.bash, sformat("/bin/chmod 700 %1",file))) != 0)
	return false;

	file = lookup(profile_settings, "poststop","");
	if (file != "" &&
		(SCR::Execute (.target.bash, sformat("/bin/chmod 700 %1",file))) != 0)
	return false;

    return true;
}


/**
 * @return true on success
 */
global define boolean DeleteProfile(string to_delete) ``{

    boolean ret = SCR::Execute(.scpm.profiles.delete, to_delete);
    if (ret)
        profiles = filter (`name, `desc, profiles, ``(name != to_delete));
    return ret;
}

/**
 * @return true on success
 */
global define boolean PrepareSwitch() ``{

    switch_info = SCR::Execute(.scpm.switch.prepare, selected_profile);
    if (switch_info == nil)
        return false;

    y2debug("switch_info: %1",switch_info);
    return true;

}

/**
 * @return true on success
 */
global define boolean SaveSwitchInfo() ``{

    list resources = lookup(switch_info, "modified_resources",[]);
    list saved_resources = [];

    foreach (`resource, resources, ``{
        resource = add(resource, "save", true);
        saved_resources = add(saved_resources,resource);
    });

    switch_info = add(switch_info,"modified_resources",saved_resources);

    y2debug("switch_info:%1", switch_info);

    return true;
}

/**
 * @return true on success
 */
global define boolean DropSwitchInfo() ``{

    list resources = lookup(switch_info, "modified_resources",[]);
    list saved_resources = [];

    foreach (`resource, resources, ``{
        resource = add(resource, "save", false);
        saved_resources = add(saved_resources,resource);
    });

    switch_info = add(switch_info,"modified_resources",saved_resources);

    y2debug("switch_info:%1", switch_info);

    return true;
}

/**
 * @return true on success
 */
global define boolean Switch() ``{

    boolean ret = SCR::Execute(.scpm.switch, switch_info);
    if (ret == nil || ret == false)
        return false;

    active_profile = selected_profile;
    return true;

}

/**
 * @return true on success
 */
global define boolean WriteSCPMStatus() ``{

    boolean ret = SCR::Write(.scpm.status.enabled, enabled);
    return ret;

}

/**
 * @return true on success
 */
global define boolean WriteResources(string resource_set) ``{

    boolean ret = SCR::Write(.scpm.resources.current, resource_set);
    return ret;

}

/**
 * @return true on success
 */
global define boolean RebuildDB() ``{

    boolean ret = SCR::Execute(.scpm.resources.rebuild);
    return ret;

}

global define boolean DeleteResourceSet(string set) ``{

    boolean ret = SCR::Execute(.scpm.resources.delete, set);
    if (ret)
        resource_sets_individual = filter (`name, resource_sets_individual,
            ``(name != set));
    return ret;
}

global define boolean CopyResourceSet(string set, string newset) ``{

    boolean ret = SCR::Execute(.scpm.resources.copy, set, newset);

    if (ret)
        resource_sets_individual = add (resource_sets_individual, newset);

    return ret;
}

/**
 * @return true on success
 */
global define boolean RunIntro() ``{

    boolean ret = SCR::Execute(.target.bash,"konqueror info:/scpm/introduction &");
    return ret;
}

/**
 * @return
 */
global define string ShowChanges(integer resource_no) ``{

    list resources = lookup (switch_info, "modified_resources", []);

    map resource = select (resources, resource_no, $[]);

    string name = lookup(resource, "resource_name","");
    string type = lookup(resource, "resource_type","");

    SCR::Execute(.scpm.profiles.changes, type, name);
    string changes = SCR::Read(.target.string, changespath); //check for error?

    if (changes == "" || changes == nil)
        return name + "(" + type + ")" + "<br> not implemented yet";
    else
        return changes;
}

/**
 * @return true on success
 */
global define boolean WriteUserSettings() ``{

    state = $[];
    state = add (state, "first_time", false);
    state = add (state, "close_popups", close_popups);
    boolean ret = SCR::Write(.target.ycp, "/var/lib/YaST2/scpm.ycp", state);

	return ret;
}

/**
 * @return
 */
global define list GetProfilesAsItems() ``{

    list items = [];
    items = maplist (`name, `descr, profiles, ``{
        if (name == active_profile)
            return `item(`id(name),"---->",name,descr);
        else
            return `item(`id(name),"",name,descr);
    });
    return items;
}

/**
 * @return
 */
global define list GetResourcesAsItems() ``{

    list resources = lookup (switch_info, "modified_resources", []);
    list items = [];
    integer i = 0;

    foreach (`resource, resources, ``{
        string flag = "";
        if (lookup(resource,"is_new",false))
            flag = "NEW";
        else if(lookup(resource,"is_deleted",false))
            flag = "DELETED";


        items = add(items, `item(`id(i),
                                 lookup(resource,"save",false)? "X":"",
                                 flag,
                                 lookup(resource,"resource_name",""),
                                 lookup(resource,"resource_type","")));
        i = i + 1;
    });
    return items;
}

/**
 * @return
 */
global define boolean CheckNameValidity(string name) ``{

    if (size(name) < 1)
        return false;
    if (name != filterchars(name,"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ1234567890-_."))
        return false;
    string first = substring(name,0,1);
    if (size(deletechars(first,"-_.")) <1)
        return false;
    return true;
}

/**
 * @return
 */
global define boolean CheckFilesValidity(map new_settings) ``{

	string file ="";

	// test -x ???
	file = lookup(new_settings, "prestart","");
	if (file != "" &&
		(SCR::Execute (.target.bash, sformat("/usr/bin/test -e %1",file))) != 0)
	return false;

	file = lookup(new_settings, "poststart","");
	if (file != "" &&
		(SCR::Execute (.target.bash, sformat("/usr/bin/test -e %1",file))) != 0)
	return false;

	file = lookup(new_settings, "prestop","");
	if (file != "" &&
		(SCR::Execute (.target.bash, sformat("/usr/bin/test -e %1",file))) != 0)
	return false;

	file = lookup(new_settings, "poststop","");
	if (file != "" &&
		(SCR::Execute (.target.bash, sformat("/usr/bin/test -e %1",file))) != 0)
	return false;

    return true;
}

/**
 * @return
 */
global define boolean ModifiedSettings(map new_settings) ``{

    boolean ret = false;

    foreach (`type, `value, profile_settings, ``{
        if (type != "name")
            if (value != lookup(new_settings, type, "")) ret = true;
    });

    return ret;
}

/**
 * @return
 */
global define string GetProgressText() ``{

    // bit ugly...
    list ret_l = [];
    integer i = progress_size;

    string all = SCR::Read(.target.string, progresspath);
    list all_l = splitstring (all, "\n");

    while (i < size (all_l)) {
        ret_l = add (ret_l, select(all_l, i, ""));
        i = i + 1;
    }

    progress_size = size (all_l) - 1;

    string ret = mergestring (ret_l, "\n");
    return ret;
}

/* EOF */
}
