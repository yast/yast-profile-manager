/**
 * File:	modules/ProfileManager.ycp
 * Package:	Configuration of profile-manager
 * Summary:	Data for configuration of profile-manager, input and output functions.
 * Authors:	Jiri Suchomel <jsuchome@suse.cz>
 *
 * $Id$
 *
 * Representation of the configuration of profile-manager.
 * Input and output routines.
 */

{

module "ProfileManager";
textdomain "profile-manager";

import "Progress";
import "Report";
import "Summary";

//include "./routines.ycp";
include "profile-manager/routines.ycp";

global boolean first_time = true; // to some file!
global boolean enabled = false;
global boolean close_popups = false;

global map profiles = $[ "prvni": "popis prvniho", "zweite":"", "third_profile": "This is the long description of the third profile. It it long, because I would like to see the table with the long descriptions." ];
global list profiles_to_delete = [];

global map profile_settings = $[];

global string active_profile = "prvni";
global string selected_profile = "";

global string current_resources = "typical";

global list resource_sets_predefined = [ "typical", "network_only" ];
global list resource_sets_individual = [ "my_lovely_one" ]; // user cannot create this !

global map switch_info = $[];
global string profile_action = nil;

/**
 * Abort function
 * return boolean return true if abort
 */
global block AbortFunction = nil;

/**
 * Data was modified?
 */
global boolean modified = false;

global boolean proposal_valid = false;
global boolean write_only = false;

/**
 * Data was modified?
 * @return true if modified
 */
global define boolean Modified() ``{
    y2debug("modified=%1",modified);
    return modified;
};


/**
 * Read all profile-manager settings
 * @return true on success
 */
global define boolean Read() ``{

    /* Xprofile-manager read dialog caption */
    string caption = _("Initializing profile-manager configuration");

    integer steps = 5;

    integer sl = 0;
    sleep(sl);

    Progress::New( caption, " ", steps, [
	    _("Read the SCPM state"),
	    _("Read the list of profiles"),
	    _("Read the profiles descriptions"),
	    _("Read current resource set"),
	], [
	    _("Reading the SCPM state..."),
	    _("Reading the profiles..."),
	    _("Reading the profiles descriptions..."),
	    _("Reading current resource set..."),
	    _("Finished")
	],
	""
    );


/*    first_time = SCR::Read(.target.yast2, "scpm_first.ycp");
    if (first_time)
        SCR::Write(.target.yast2, "scpm_first.ycp",false);*/

    // read
    if(Abort()) return false;
    Progress::NextStage();
    if(!ReadSCPMStatus()) Report::Error(_("Can not read SCPM status!"));
    sleep(sl);

    // read
    if(Abort()) return false;
    Progress::NextStage();
    if(!ReadProfiles()) Report::Error(_("Can not read profiles!"));
    sleep(sl);

    // read
    if(Abort()) return false;
    Progress::NextStep();
    if(!ReadProfilesDescriptions()) Report::Error(_("Can not read profiles descriptions!"));
    sleep(sl);

    // read current resources
    if(Abort()) return false;
    Progress::NextStage();
    if(!ReadCurrentResources()) Report::Error(_("Can not read current resources!"));
    sleep(sl);

    if(Abort()) return false;
    ProgressNextStage(_("Finished"));
    sleep(sl);

    if(Abort()) return false;
    modified = false;
    return true;
}

/**
 * Write all profile-manager settings
 * @return true on success
 */
global define boolean Write() ``{

    string caption = _("Saving profile-manager configuration");

    integer steps = 1;

    integer sl = 0;
    sleep(sl);

    Progress::New(caption, " ", steps, [
	    _("Write the settings"), // we should also save "close popups" check
	], [
	    _("Writing the settings..."),
	    _("Finished")
	],
	""
    );

    // write settings
    if(Abort()) return false;
    Progress::NextStage();
    if (size(profiles_to_delete)>0)
        if(!DeleteProfile()) Report::Error (_("Can not write settings!"));
    sleep(sl);

    if(Abort()) return false;
    ProgressNextStage(_("Finished"));
    sleep(sl);

    if(Abort()) return false;
    return true;
}

/**
 * Get all profile-manager settings from the first parameter
 * (For use by autoinstallation.)
 * @param settings The YCP structure to be imported.
 * @return boolean True on success
 */
global define boolean Import (map settings) ``{
    // TODO FIXME: your code here (fill the above mentioned variables)...
    sleep(3000);
    return true;
}

/**
 * Dump the profile-manager settings to a single map
 * (For use by autoinstallation.)
 * @return map Dumped settings (later acceptable by Import ())
 */
global define map Export () ``{
    // TODO FIXME: your code here (return the above mentioned variables)...
    sleep(3000);
    return $[];
}

/**
 * Create a textual summary and a list of unconfigured cards
 * @param split split configured and unconfigured?
 * @return summary of the current configuration
 */
global define list Summary() ``{
    // TODO FIXME: your code here...
    return [ _("Configuration summary ..."), [] ];
}

/**
 * Create an overview table with all configured cards
 * @return table items
 */
global define list Overview() ``{
    // TODO FIXME: your code here...
    return [];
}

/**
 * @return true on success
 */
define boolean ReadProfiles() ``{

    // read the profile list via SCR::Read(.scpm.profiles)
    return true;
}

/**
 * @return true on success
 */
define boolean ReadProfilesDescriptions() ``{

    // read the descriptions of each profile via SCR::Read(.scpm.profiles.description, profile)
    return true;
}

/**
 * @return true on success
 */
define boolean ReadSCPMStatus() ``{

    // reads the state of SCPM via SCR::Read(.scpm.status.enabled)
    //    enabled = true;
    return true;
}


/**
 * @return true on success
 */
define boolean ReadCurrentResources() ``{

    // reads the current res.det via SCR::Read(.scpm.resources.current)
    return true;
}

/**
 * @return true on success
 */
global define boolean GetProfile() ``{

    // read the profile settings (we already have descriptions)
    // SCR::Read(.scpm.profiles.<command>, selected_profile)
    string prestart = "";

    profile_settings = add (profile_settings, "name", selected_profile);
    profile_settings = add (profile_settings, "description", lookup(profiles, selected_profile,""));
    profile_settings = add (profile_settings, "prestart", prestart);

    return true;
}

global define boolean AddProfile(string name) ``{

    profiles = add (profiles, name, "");

    // SCR::Execute(.scpm.profiles.add, name)
    return true;
}

global define boolean CopyProfile(string source, string new) ``{

    profiles = add (profiles, new, "");

    // SCR::Execute(.scpm.profiles.copy, source, new)
    return true;
}

global define boolean RenameProfile(string old, string new) ``{

    string desc = lookup(profiles, old, "");
    profiles = filter (`name, `desc, profiles, ``(name != old));
    profiles = add (profiles, new, desc);

    // SCR::Execute(.scpm.profiles.rename, old, new)
    return true;
}


global define boolean SetProfile(string name) ``{

    string desc = deletechars(lookup(profile_settings, "description",""), "\n");
    profiles = add (profiles, name, desc);

    // SCR::Write(.scpm.profiles.<command>, <argument>, name)

    // if (secure) ... (file permitions)

    return true;
}


global define boolean DeleteProfileFromMap(string to_delete) ``{

    // deletes the selected profile from the map
    profiles = filter (`name, `desc, profiles, ``(name != to_delete));
    profiles_to_delete = add(profiles_to_delete, to_delete);

    return true;
}

global define boolean DeleteProfile() ``{

    foreach (`profile, profiles_to_delete, ``{
        y2milestone("Deleting profile %1",profile);
    // SCR::Execute(.scpm.profiles.delete, profile)
    });
    return true;
}

global define boolean PrepareSwitch() ``{

    // I should get the map like this:
    map sw_i = $[ "profile_modified": true,
                  "profile_name": selected_profile,
                  "modified_resources": [
                        $[ "resource_name": "sendmail",
                           "resource_type": "service",
                           "is_new": false,
                           "is_deleted": true,
                           "save": false ],
                        $[ "resource_name": "/etc/sendmail.cf",
                           "resource_type": "file",
                           "is_new": false,
                           "is_deleted": false,
                           "save": true ]
                  ]
                ];


    // SCR::Execute(.scpm.switch.prepare, selected) ->  switch_info
    switch_info = sw_i;

}

global define boolean SaveSwitchInfo() ``{

    list resources = lookup(switch_info, "modified_resources",[]);
    list saved_resources = [];

    foreach (`resource, resources, ``{
        resource = add(resource, "save", true);
        saved_resources = add(saved_resources,resource);
    });

    switch_info = add(switch_info,"modified_resources",saved_resources);

    y2debug("switch_info:%1", switch_info);

    return true; // only affects the swich_info map?
}

global define boolean DropSwitchInfo() ``{

    list resources = lookup(switch_info, "modified_resources",[]);
    list saved_resources = [];

    foreach (`resource, resources, ``{
        resource = add(resource, "save", false);
        saved_resources = add(saved_resources,resource);
    });

    switch_info = add(switch_info,"modified_resources",saved_resources);

    y2debug("switch_info:%1", switch_info);

    return true;
}

global define boolean Switch() ``{

    active_profile = selected_profile;
    // SCR::Execute(.scpm.switch, switch_info)

}

global define boolean WriteStatus() ``{

    // SCR::Write(.scpm.status.enabled, enabled)

}

global define boolean WriteResources(string resource_set) ``{

    // SCR::Write(.scpm.resources.current, resource_set)

}

global define boolean RunIntro() ``{

    SCR::Execute(.target.bash,"konqueror info:/scpm/introduction &");
}

/* EOF */
}
