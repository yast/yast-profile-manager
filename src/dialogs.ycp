/**
 * File:	include/profile-manager/dialogs.ycp
 * Package:	Configuration of profile-manager
 * Summary:	Dialogs definitions
 * Authors:	Jiri Suchomel <jsuchome@suse.cz>
 *
 * $Id$
 */

{

textdomain "profile-manager";

import "FileUtils";
import "Label";
import "Popup";
import "ProfileManager";
import "Report";
import "Wizard";

include "profile-manager/helps.ycp";


/**
 * popup for entering new service for resource group
 * @return service name; empty string on cancel
 */
define string GetService() ``{

    // read the list of services...
    map services	= (map) SCR::Read (.init.scripts.comments);
    list service_items	= [];

    foreach (any k, map v, (map<any,map>) services, ``{
	service_items = add (service_items,
	    `item( `id(k), k, false));
    });

    string service = "";
    UI::OpenDialog( `opt(`decorated), `HBox(
	`HSpacing(1),
	`VBox(
	    `VSpacing(0.2),
	    // combo box label
	    `ComboBox( `id(`services), _("Available &Services"), service_items),
	    `VSpacing(0.2),
	    `HBox(
		`PushButton(`id(`ok),`opt(`default), Label::OKButton()),
		`PushButton(`id(`cancel), Label::CancelButton())
	    ),
	    `VSpacing(0.2)),
	`HSpacing(1)
    ));

    UI::SetFocus (`id (`services));

    any ret = nil;
    do {
	ret	= UI::UserInput();
	service = (string) UI::QueryWidget(`id(`services), `Value);

	if (ret == `cancel)
	{
	    service = "";
	}
	else if (ret == `ok)
	{
	    // check service existence
	    // TODO it has to exist, if combo is not editable
	    if (service != "" &&
		!(boolean)SCR::Read (.init.scripts.exists, service))
	    {
		// yes/no popup
		if (!Popup::YesNo (sformat(_("Service %1 does not exist.
Really add it?"), service)))
		    continue;
	    }
	}
    } while (ret != `ok && ret != `cancel);

    UI::CloseDialog();
    return service;
}

/**
 * popup for entering new file for resource group
 * @return file name; empty string on cancel
 */
define string GetFile() ``{

    string filename = "";
    UI::OpenDialog( `opt(`decorated), `HBox(
	`HSpacing(1),
	`VBox(
	    `VSpacing(0.2),
	    `HBox (
		`TextEntry (`id(`file), Label::FileName(), ""),
		`HSpacing (1),
		`VBox (
		    `Label(""),
		    // button label
		    `PushButton (`id (`browse), `opt (`key_F6), _("&Browse..."))
		)
	    ),
	    `VSpacing(0.2),
	    `HBox(
		`PushButton(`id(`ok),`opt(`default), Label::OKButton()),
		`PushButton(`id(`cancel), Label::CancelButton())
	    ),
	    `VSpacing(0.2)),
	`HSpacing(1)
    ));

    UI::SetFocus (`id (`file));

    any ret = nil;
    do {
	ret		= UI::UserInput();
	filename	= (string) UI::QueryWidget(`id(`file), `Value);

	if (ret == `cancel)
	{
	    filename = "";
	}
	else if (ret == `browse)
	{
	    string f = UI::AskForExistingFile (
		(filename != "")? "/" : filename, "*", "");
	    if (f != nil)
		filename = f;
	    UI::ChangeWidget (`id(`file), `Value, filename);
	}
	else if (ret == `ok)
	{
	    if (filename != "" && !FileUtils::Exists (filename))
	    {
		// error popup
		Popup::Error (_("File does not exist."));
		continue;
	    }
	}
    } while (ret != `ok && ret != `cancel);

    UI::CloseDialog();
    return filename;
}


/**
 * Popup for editing or adding resource group settings
 * @param group map with info of the group
 * @return modified group
 */
define map ResourceGroupPopup (map group, map resource_groups) ``{

    string groupname	= group["name"]:"";
    string descr	= group["description"]:"";
    string what		= (group == $[] || group["what"]:""=="added")
			? "added": "edited";
    list<term> items		= [];
    map org_group	= (map) eval (group);

    // map for saving user_defined flags of each resource
    map user_defined	= $[];

    map type2string	= $[
	// resource type (menu entry)
	"file"		: _("File"),
	// resource type (menu entry)
	"service"	: _("Service"),
    ];

    /**
     * Scan table items for presence of given resource
     */
    define boolean has_resource (string name, string type) ``{

	return (contains (items, `item(`id(name), "X", name, type)) ||
	    contains (items, `item(`id(name), "", name, type)));
    }
    /**
     * helper function for building table items of one resource group
     */
    define list<term> resource_group_items() ``{

	return maplist (map res, group["resources"]:[], ``{
	    string name = res["name"]:"";
	    if (res["active"]:false)
		return `item(`id(name), "X", name, type2string[res["type"]:""]:"");
	    else
		return `item(`id(name), "", name, type2string[res["type"]:""]:"");
    });

    }

    term con = `HBox(`VSpacing(26),`HSpacing(1.5), `VBox(
        `HSpacing(60),
	`VSpacing(0.5),
	// textentry label
	`TextEntry (`id(`name), _("Resource &Group"), groupname),
        `VSpacing(0.5),
	// textentry label
	`TextEntry (`id(`descr), _("D&escription"), descr),
        `VSpacing(0.5),
	// frame label
	`Frame(_("Resources"), `HBox(`HSpacing(1), `VBox(
            `VSpacing(0.2),
	    `Table(`id(`resources), `opt (`notify),
		`header(
		    " ",
                    // Header of the table with resources of one group 2/3
                    _("Name"),
                    // Header of the table with resources of one group 3/3
                    _("Type")),
                items
            ),
            `VSpacing(0.2),
	    `HBox(
		// Push button label
		`PushButton(`id(`adds_b), `opt(`key_F3), _("Add &Service")),
                // Push button label
		`PushButton(`id(`addf_b), `opt(`key_F4),_("Add &File")),
		`Left(
                    // Push button label
		    `PushButton(`id(`delete_b),`opt(`key_F5),_("&Delete"))),
		`Right(
                    // Push button label
		    `PushButton(`id(`reset_b),`opt(`key_F6),_("&Reset Group")))
		),
	    `VSpacing(0.2)),
	    `HSpacing())
	),
        `VSpacing(0.5),
	`HBox(
	    `HSpacing(),
	    `Left (`PushButton (`id(`ok), `opt(`default),Label::OKButton())),
	    `Right (`PushButton(`id(`cancel), Label::CancelButton())),
	    `HSpacing()
	),
        `VSpacing(0.5)
	),
        `HSpacing(1.5)
    );

    UI::OpenDialog(`opt(`decorated), con);

    // create the table items
    items = resource_group_items ();
    UI::ChangeWidget(`id(`resources), `Items, items);
    UI::SetFocus(`id(`name));

    y2debug ("edited group: %1", group);
    if (group["user_defined"]:true == false)
    {
	// default group cannot be renamed
	UI::ChangeWidget(`id(`name), `Enabled, false);
    }
    else
	// user defined group cannot be reset
	UI::ChangeWidget(`id(`reset_b), `Enabled, false);

    symbol ret = nil;
    do
    {
        ret		= (symbol) UI::UserInput ();
	groupname	= (string) UI::QueryWidget (`id(`name), `Value);
	string selected	= (string)UI::QueryWidget(`id(`resources),`CurrentItem);

	if (ret == `resources)
	{
	    items = maplist (term i, items, ``{
		if (i[2]:"" != selected)
		    return i;
		if (i[1]:"" == "X")
		    return `item(`id(selected), "", selected, i[3]:"");
		else
		    return `item(`id(selected), "X", selected, i[3]:"");
	    });
	    UI::ChangeWidget(`id(`resources), `Items, items);
	    UI::ChangeWidget(`id(`resources), `CurrentItem, selected);
	}
	if (ret == `reset_b)
	{
	    map orig_group = ProfileManager::GetDefaultResourceGroup(groupname);
	    if (size (orig_group) > 0)
	    {
		group["resources"] = eval (orig_group["resources"]:[]);
		group["description"] = eval (orig_group["description"]:"");
		items = resource_group_items ();
		UI::ChangeWidget(`id(`resources), `Items, items);
		UI::ChangeWidget(`id(`descr), `Value, group["description"]:"");
	    }
	}
	if (ret == `delete_b)
	{
	    y2debug ("deleting %1 from group %2", selected, groupname);
	    // delete entry from local items
	    items = filter (term i, items, ``(i[2]:"" != selected));
	    UI::ChangeWidget(`id(`resources), `Items, items);
	}
	if (ret == `adds_b)
	{
	    string service = GetService ();
	    if (service != "" && !has_resource (service,"service"))
	    {
		y2debug ("new service %1 for group %2", service, groupname);
		items = add (items, `item(`id(service), "", service,"service"));
		user_defined [service] = true;
		UI::ChangeWidget(`id(`resources), `Items, items);
	    }
	}
	if (ret == `addf_b)
	{
	    string file = GetFile ();
	    if (file != "" && !has_resource (file,"file"))
	    {
		y2debug ("new file %1 for group %2", file, groupname);
		items = add (items, `item(`id(file), "", file, "file"));
		user_defined [file] = true;
		UI::ChangeWidget(`id(`resources), `Items, items);
	    }
	}
	if (ret == `ok)
	{
	    // check name contents
	    if (!ProfileManager::CheckNameValidity (groupname))
	    {
		// Popup text (wrong data):
		Popup::Message(_("The name of resource group may contain only 
letters, digits, \"-\", \"_\", \".\", \"@\" and \"#\"
and must begin with a letter or digit.
Try again."));
		continue;
	    }
	    // check possible name conflicts
	    if (groupname != group["name"]:"")
	    {
		if (haskey (resource_groups, groupname))
		{
		    // error message, %1 is group name
		    Popup::Error(sformat(_("Resource group %1 already exists.
Use another name."), groupname));
		    ret = `notok;
		    continue;
		}
		if (group["name"]:"" != "")
		{
		    group["org_name"]	= group["name"]:"";
		}
		if (what != "added")
		{
		    what		= "renamed";
		}
		group["name"]		= groupname;
	    }
	    group["description"]	= UI::QueryWidget (`id(`descr), `Value);
	    group["resources"]		= maplist (term i, items, ``{
		return $[
		    "active"		: i[1]:"" == "X",
		    "name"		: i[2]:"",
		    "type"		: i[3]:"",
		    "user_defined"	: user_defined [ i[2]:""]:false
		];
	    });
	    if (what == "added")
	    {
		group["user_defined"]	= true;
		group["active"]		= true;
	    }
	    boolean group_modified = false;
	    foreach (string k, any v, (map<string,any>) group,``{
		if (org_group[k]:nil != v)
		    group_modified = true;
	    });
	    if (group_modified)
	    {
		group["user_modified"]	= true;
		group["what"]		= what;
		y2milestone ("resource group %1 modified", groupname);
	    }
	    else ret = `back;
	}
	if (ret == `cancel || ret == `back)
	{
	    group = $[];
	}
    } while ( !contains ([`ok, `next, `cancel, `back], ret));

    UI::CloseDialog();

    return group;
}


/**
 * Resource configuration dialog
 * @return any Returned value from UserInput() call
 */
define symbol ConfigureResourcesDialog () {

    map<string,map> resource_groups	= ProfileManager::GetResourceGroups();

    list resource_groups_deleted = ProfileManager::resource_groups_deleted;

    /**
     * helper function for building table items with resource groups
     */
    define list resource_groups_items() ``{

	list items = [];
	foreach (string name, map group, resource_groups, {
	    if (group["what"]:"" == "deleted")
		return;
	    string desc = group["description"]:"";
	    if (group["active"]:false)
		items = add (items, `item(`id(name),"X", name, desc));
	    else
		items = add (items, `item(`id(name),"", name, desc));
	});
	return items;
    }

    /**
     * Marks selected resource group for deletion (will not be shown in list)
     * @param groupname name of group
     */
    define void mark_group_deleted (string groupname) {

	resource_groups = remove (resource_groups, groupname);
	if (resource_groups[groupname, "what"]:"" != "added")
	{
	    resource_groups_deleted = add (resource_groups_deleted, groupname);
	}
	y2debug ("resource group %1 marked for deletion", groupname);
    }

    /**
     * Changes "active" flag of selected resource group to opposite value
     * @param groupname name of group
     * @return new value
     */
    define boolean mark_group_active (string groupname) {

	boolean active = !resource_groups[groupname, "active"]:false;
	resource_groups[groupname,"active"] = active;
	resource_groups[groupname,"user_modified"] = true;
	return active;
    }
    /**
     * Updates resource_groups map with currently edited group
     */
    define void change_group (map group) {

	if (group["org_name"]:"" != "")
	    resource_groups = remove (resource_groups, group["org_name"]:"");
	resource_groups = add (resource_groups, group["name"]:"",group);
    }

    // Caption of the dialog:
    string caption = _("Configuration of Resource Groups");

    term contents = `HBox(
	`HSpacing(1.5),
	`VBox(
        `VSpacing(1),
	// frame label:
        `Frame(_("Resource Group"), `HBox(`HSpacing(0.5),
            `VBox(
                `VSpacing(0.2),
		    `Table(`id(`rgroups), `opt (`notify),
                    `header(
                        " ",
                        // Header of the table with resource groups 2/3
                        _("Name"),
                        // Header of the table with resource groups 3/3
                        _("Description")),
                    []
                    ),
                `VSpacing(0.2),
		`HBox(
                    // Push button label
		    `PushButton(`id(`add_button), `opt(`key_F3), _("&Add")),
                    // Push button label
		    `PushButton(`id(`edit_button), `opt(`key_F4),_("&Edit")),
		    `Left(
                    // Push button label
		    `PushButton(`id(`delete_button),`opt(`key_F5),_("&Delete"))),
		    `Right(`PushButton(`id(`reset_button),`opt(`key_F6),
			// Push button label
			_("&Reset All")))
		    ),
		`VSpacing(0.2)
                ),
            `HSpacing(0.5)
        )),
        `VSpacing(1)
	),
	`HSpacing(1.5)
    );

    Wizard::SetContentsButtons (caption, contents, HELPS["resources"]:"",
                Label::CancelButton (), Label::OKButton ());

    Wizard::HideAbortButton();

    list items = resource_groups_items();
    UI::ChangeWidget(`id(`rgroups), `Items, items);

    if (items != [])
	UI::SetFocus(`id(`rgroups));

    any ret = nil;
    string selected = "";
    boolean modified = false;
    while (true)
    {
	ret		= UI::UserInput ();
	selected	= (string) UI::QueryWidget(`id(`rgroups), `CurrentItem);
	if (ret == `delete_button)
	{
	    // %1 is resource group name
	    if (Popup::YesNo(sformat(_("Delete group %1?"), selected)))
	    {
		mark_group_deleted (selected);
		UI::ChangeWidget(`id(`rgroups),`Items, resource_groups_items());
		modified = true;
	    }
	    continue;
	}
	else if (ret == `add_button || ret == `edit_button)
	{
	    map group = $[];
	    if (ret == `add_button)
		group = ResourceGroupPopup($[], resource_groups);
	    else
		group = ResourceGroupPopup (resource_groups[selected]:$[],
		    resource_groups);
	    if (group != $[])
	    {
		change_group (group);
		UI::ChangeWidget(`id(`rgroups),`Items, resource_groups_items());
		UI::ChangeWidget(`id(`rgroups), `CurrentItem, group["name"]:"");
		modified = true;
	    }
	    continue;
	}
	else if (ret == `reset_button)
	{
	    map<string,map> rgs = ProfileManager::GetDefaultResourceGroups();
	    if (size (rgs) > 0)
	    {
		resource_groups	= eval (rgs);
		resource_groups_deleted	= [];
		UI::ChangeWidget(`id(`rgroups),`Items, resource_groups_items());
	    }
	}
	else if (ret == `rgroups)
	{
	    map group	= resource_groups[selected]:$[];
	    if (!group["active"]:false)
	    {
		// files from the resource group that are not available
		list<string> missing_files	= [];
		foreach (map res, group["resources"]:[], {
		    string name = res["name"]:"";
		    if (res["type"]:"" == "file" && !FileUtils::Exists (name))
			missing_files	= add (missing_files, res["name"]:"");
		});
		if (missing_files != [] && !Popup::AnyQuestionRichText (Popup::NoHeadline (),
		    // continue/cancel popup message, %1 is group name, %2 file(s)
		    sformat (_("The file <b>%2</b> from resource group <i>%1</i>
is not available on the system.<br>
The resource group is probably not installed.<br>
Really select this resource group?",
"These files from resource group <i>%1</i> are not available on the system:<br>
<b>%2</b><br>
The resource group is probably not installed.<br>
Really select this resource group?", size (missing_files)),
		    selected, mergestring (missing_files, "<br>")),
		    60, 9,
		    Label::YesButton (), Label::NoButton (), `focus_no)
		)
		{
		    continue;
		}
	    }
	    boolean active = mark_group_active (selected);
	    UI::ChangeWidget (`id(`rgroups),`Item (selected, 0), active?"X":"");
	    modified = true;
	}
	else if (ret == `back ||
	    (ret == `cancel && Popup::ReallyAbort (ProfileManager::Modified())))
	{
	    // throw away changes
	    break;
	}
	else if (ret == `next)
	{
	    if (modified)
	    {
		ProfileManager::resource_groups_modified	= true;

		// save the local maps...
		ProfileManager::resource_groups	= eval (resource_groups);
		ProfileManager::resource_groups_deleted	=
		    eval (resource_groups_deleted);
	    }
	    break;
	}
    };
    return (symbol) ret;
}


/**
 * Popup for editing user permission
 * @param user name (empty means we want to add new)
 * @param permission ("switch" or "all")
 * @param map with other user names already used (to prevent conflicts)
 * @return
 */
define map EditUserPopup (string name, string permission, map conflicts) {

    map user	= $[];

    term name_entry	= `Left (`Label (`id(`name), name));
    if (name == "")
    {
	name_entry	= `ComboBox (`id(`name),`opt(`editable,`hstretch),
	    // combo box label
	    _("Username"),
	    filter (string n, ProfileManager::GetUsernames (),
		``(!haskey (conflicts,n)))
	);
    }

    term con = `HBox (`HSpacing(1.5), `VBox(
	`HSpacing (35),
	`VSpacing (),
	name_entry,
        `VSpacing(0.5),
	// frame label (for radiobutton group)
	`Frame (_("Permission"), `HBox (
	    `HSpacing (0.5),
	    `RadioButtonGroup (`id(`rb_perm), `VBox(
		`VSpacing (0.5),
		// radio button label
		`Left (`RadioButton(`id("switch"), _("&Switch Only"),
		    permission == "switch" || permission == "")),
		// radio button label
                `Left (`RadioButton(`id("all"), _("&Everything"),
		    permission == "all")),
		`VSpacing (0.5)
            ))
	)),
        `VSpacing (0.5),
	`HBox(
	    `HSpacing(1),
	    `Left (`PushButton (`id(`ok), `opt(`default), Label::OKButton())),
	    `Right (`PushButton(`id(`cancel), Label::CancelButton())),
	    `HSpacing(1)
	),
        `VSpacing(0.5)
	),
        `HSpacing(1.5)
    );

    UI::OpenDialog(`opt(`decorated), con);

    any ret	= nil;
    do
    {
        ret	= UI::UserInput ();

	if (ret == `cancel)
	{
	    user	= $[];
	}
	if (ret == `ok)
	{
	    user["name"]	= UI::QueryWidget(`id(`name), `Value);
	    if (user["name"]:"" == "" || issubstring (user["name"]:""," "))
	    {
		// error popup (empty user name)
		Report::Error (_("Enter a valid username."));
		ret = `not_ok;
		continue;
	    }
	    user["permission"]	= UI::QueryWidget(`id(`rb_perm),`CurrentButton);
	}
    } while (ret != `ok && ret !=`cancel);

    UI::CloseDialog();

    return user;
}

/**
 * Dialog for configuration of users able to run scpm
 */
define any UsersDialog () {

    // Dialog caption label:
    string caption = _("User Permissions Configuration");

    any ret		= nil;
    boolean modified	= false;

    map<string,string> users	= ProfileManager::GetUsers ();

    map trans	= $[
	// radio button label (user permission)
	"switch"	: _("Switch Only"),
	// radio button label (user permission)
	"all"		: _("Everything"),
    ];
    map names	= $[];//map with user names (to check conflicts)

    /**
     * helper for generating list of items
     */
    define list users_items () {
	names	= $[];
	return maplist (string name, string perm, users, {
	    names[name]	= 1;
	    return `item (`id (name), name, trans[perm]:"");
	});
    }

    term contents = `HBox (`HSpacing(3), `VBox (
        `VSpacing(1),
	// frame label
        `Frame(_("Users"), `HBox(`HSpacing (0.5),
            `VBox(
                `VSpacing(0.2),
		`Table(`id(`users), `opt (`notify),
                    `header(
                        // Header of the table with users 1/2
                        _("Username"),
                        // Header of the table with users 2/2
                        _("Permissions")),
                    []
                ),
                `VSpacing(0.2),
		`HBox(
		    `PushButton(`id(`add), `opt(`key_F3), Label::AddButton()),
		    `PushButton(`id(`edit),`opt(`key_F4), Label::EditButton ()),
		    `Left(
			// Push button label
			`PushButton(`id(`delete),`opt(`key_F5),_("&Delete"))
		    )
		),
		`VSpacing (0.2)
            ),
            `HSpacing (0.5)
        )),
        `VSpacing ()
    ), `HSpacing (3));

    Wizard::SetContentsButtons (caption, contents, HELPS["users"]:"",
	Label::CancelButton (), Label::OKButton ());
    Wizard::HideAbortButton();

    list items	= users_items ();
    UI::ChangeWidget(`id(`users), `Items, items);
    if (items != [])
	UI::SetFocus(`id(`users));

    while (true)
    {
	ret		= UI::UserInput ();
	string selected	= (string) UI::QueryWidget(`id(`users), `CurrentItem);

	if (ret == `add || ret == `edit || ret == `users)
	{
	    map user = $[];
	    if (ret == `add)
		user	= EditUserPopup ("", "", names);
	    else
		user	= EditUserPopup (selected, users[selected]:"", $[]);
	    if (user != $[])
	    {
		users[user["name"]:""]	= user["permission"]:"";
		UI::ChangeWidget(`id(`users),`Items, users_items());
		UI::ChangeWidget(`id(`users), `CurrentItem, user["name"]:"");
	    }
	    continue;
	}
	else if (ret == `delete)
	{
	    users = remove (users, selected);
	    UI::ChangeWidget(`id(`users),`Items, users_items());
	    continue;
	}
	else if (ret == `back ||
	    (ret == `cancel && Popup::ReallyAbort (ProfileManager::Modified())))
	{
	    break;
	}
	else if (ret == `next)
	{
	    ProfileManager::SetUsers (users);
	    break;
	}
    }
    return (symbol) ret;
}


/* EOF */
}
