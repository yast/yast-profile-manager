/**
 * File:	include/profile-manager/dialogs.ycp
 * Package:	Configuration of profile-manager
 * Summary:	Dialogs definitions
 * Authors:	Jiri Suchomel <jsuchome@suse.cz>
 *
 * $Id$
 */

{

textdomain "profile-manager";

import "ProfileManager";
import "Console";

include "ui/common_popups.ycp";
include "ui/common_messages.ycp";

include "profile-manager/helps.ycp";
include "profile-manager/routines.ycp";

/**
 * Profile settings dialog
 * @return any Returned value from UserInput() call
 */
global define any ProfileSettingsDialog () ``{

    string edited = ProfileManager::selected_profile;
    string action = ProfileManager::profile_action;
    map profiles = ProfileManager::profiles;

    // reading the profile settings
    ProfileManager::GetProfile();

    map settings = ProfileManager::profile_settings;

	// Dialog caption label
    string caption = _("Special profile settings");
    term contents = `HBox(`HSpacing(1.5),
        `VBox(
        `VSpacing(1),
		// frame label
        `Frame(_("Special profile settings"), `HBox(`HSpacing(1),
            `VBox(
                `VSpacing(0.2),
                // Text entry label
                `TextEntry(`id(`name),_("Pro&file Name")),
                `VSpacing(0.2),
                `HBox(
                    `HSpacing(0.5),
                    // Text entry label (profile description)
                    `MultiLineEdit(`id(`desc),_("&Description")),
                    `HSpacing(0.5)
                    ),
                `VSpacing(0.2),
                // Text entry label
                `TextEntry(`id(`prestart),_("Pr&e Start Script")),
                `VSpacing(0.2),
                // Text entry label
                `TextEntry(`id(`poststart),_("Po&st Start Script")),
                `VSpacing(0.2),
                // Text entry label
                `TextEntry(`id(`prestop),_("P&re Stop Script")),
                `VSpacing(0.2),
                // Text entry label
                `TextEntry(`id(`poststop),_("Pos&t Stop Script")),
                `VSpacing(0.2),
                `Left(`CheckBox(`id(`secure_ch),
				// checkbox label
                    _("Set file &permissions of all scripts secure (0700)."))),
                `VSpacing(0.2)
            ),
            `HSpacing(1))),
	    `VSpacing(1)),
        `HSpacing(1.5));


    Wizard::RestoreBackButton ();

    Wizard::SetContentsButtons ( caption,
				contents,
                HELPS["profilesettings"]:"",
				CancelButtonLabel (),
				OKButtonLabel () );

    UI::ChangeWidget(`id(`desc), `Value, lookup(settings,"description",""));
    UI::ChangeWidget(`id(`prestart), `Value, lookup(settings,"prestart",""));
    UI::ChangeWidget(`id(`poststart), `Value, lookup(settings,"poststart",""));
    UI::ChangeWidget(`id(`prestop), `Value, lookup(settings,"prestop",""));
    UI::ChangeWidget(`id(`poststop), `Value, lookup(settings,"poststop",""));
    if (action == "edit")
        UI::ChangeWidget(`id(`name), `Value, edited);
    else
        UI::SetFocus(`id(`name));

    any ret = nil;
    while (true)
    {
	ret = UI::UserInput ();
	if (ret == `back)
    {
        break;
    }
    else if (ret == `next)
	{
        boolean secure = UI::QueryWidget(`id(`secure_ch), `Value);
        string selected = UI::QueryWidget(`id(`name), `Value);

        if (!ProfileManager::CheckNameValidity(selected))
        {
			// Popup text (wrong data):
            UI::MessagePopup(_("Choose valid name."));
            continue;
        }

        map new_settings = $[];
        new_settings = add (new_settings, "prestart", UI::QueryWidget(`id(`prestart), `Value));
        new_settings = add (new_settings, "poststart", UI::QueryWidget(`id(`poststart), `Value));
        new_settings = add (new_settings, "prestop", UI::QueryWidget(`id(`prestop), `Value));
        new_settings = add (new_settings, "poststop", UI::QueryWidget(`id(`poststop), `Value));

        if (!ProfileManager::CheckFilesValidity(new_settings))
        {
			// Popup text (file paths are wrong):
			UI::MessagePopup(_("Choose valid paths to scripts."));
            continue;
        }

        // we don't need to check description
        new_settings = add (new_settings, "name", selected);
        new_settings = add (new_settings, "description", UI::QueryWidget(`id(`desc), `Value));

        if (action == "new")
        {
            if (lookup(profiles, selected, nil) != nil)
            {
				// Popup text:
                UI::MessagePopup(_("A profile with this name already exists."));
                continue;
            }
            ProfileManager::AddProfile(selected);
            ProgressPopup();
            if (!ProfileManager::Wait())
            {
                // Error popup text
                UI::ErrorPopup(_("Adding new profile was not succesful."));
                // continue;
            }
            else
            {
                ProfileManager::profiles = add (ProfileManager::profiles,
                        selected, "");

                if (ProfileManager::auto)
                    ProfileManager::active_profile = selected;

                ProfileManager::profile_settings = new_settings;
                if (!ProfileManager::SetProfile(selected))
                {
                    UI::ErrorPopup(
                        // Error popup text
                        _("Writing profile settings was not succesful."));
                }
            }
        }
        else if (action == "copy")
        {
            if (lookup(profiles, selected, nil) != nil)
            {
				// Popup text
                UI::MessagePopup(_("A profile with this name already exists."));
                continue;
            }
            ProfileManager::CopyProfile(edited, selected);
            ProgressPopup();
            if (!ProfileManager::Wait())
            {
                // Error popup text
                UI::ErrorPopup(_("Copying profile was not succesful."));
                //    continue;
            }
            else
            {
                ProfileManager::profiles = add (ProfileManager::profiles,
                        selected, "");

                ProfileManager::profile_settings = new_settings;
                if (!ProfileManager::SetProfile(selected))
                {
                    UI::ErrorPopup(
                        // Error popup text
                        _("Writing profile settings was not succesful."));
                }
            }
        }
        else if (action == "edit")
        {
            if (selected != edited)
            {

                if (lookup(profiles, selected, nil) != nil)
                {
					// Popup text
                    UI::MessagePopup(_("A profile with this name already exists."));
                    continue;
                }
                if (!ProfileManager::RenameProfile(edited, selected))
                {
                    // Error popup text
                    UI::ErrorPopup(_("Renaming profile was not succesful."));
                    continue;
                }
            }
            if (ProfileManager::ModifiedSettings(new_settings))
            {
                ProfileManager::profile_settings = new_settings;
                if (!ProfileManager::SetProfile(selected))
                {
                    // Error popup text
                    UI::ErrorPopup(_("Writing profile settings was not succesful."));
                }
            }
        }
        if (secure)
            ProfileManager::SetFilePermitions();
	    break;
	}
    };

    return ret;
}

/**
 * Switch dialog
 * @return any Returned value from UserInput() call
 */
global define any SwitchDialog () ``{

    string active = ProfileManager::active_profile;
    string selected = ProfileManager::selected_profile;

    list resources_as_items = ProfileManager::GetResourcesAsItems();

	// Dialog caption label
    string caption = _("Confirm Switch");
    term contents = `HBox(
	`HSpacing(1.5),
	`VBox(
        `VSpacing(1),
        `HBox(
            `HSpacing(1),
            // Label text
            `Label(_("Active Profile:")),
            `Right(`Heading(active)),
            `HSpacing(2)
            ),
        `VSpacing(0.2),
        `HBox(
            `HSpacing(1),
            // Label text
            `Label(_("New Profile:")),
            `Right(`Heading(selected)),
            `HSpacing(2)
            ),
        `VSpacing(1),
		// frame label
        `Frame(_("Modified Resources of Active Profile"), `HBox(`HSpacing(1),
            `VBox(
                `VSpacing(0.2),
		        `Table(`id(`modified),`opt(`notify),
                    `header(
                            // Header of the table with modified resources 1/4
                            _("save"),
                            // Header of the table with modified resources 2/4
                            _("flags"),
                            // Header of the table with modified resources 3/4
                            _("Resource"),
                            // Header of the table with modified resources 4/4
                            _("type")),
                    []
                    ),
                `VSpacing(0.2),
		        `HBox(
                    // Push button label ---new 23.8.
		            `PushButton(`id(`select_button), _("&Select or unselect")),
                    // Push button label ---changed 23.8.
		            `PushButton(`id(`save_button), _("Select &all")),
                    /* original
		            `PushButton(`id(`save_button), _("&Save all")), */
                    // Push button label ---changed 23.8.
		            `PushButton(`id(`drop_button), _("&Unselect all")),
                    /* original
		            `PushButton(`id(`save_button), _("&Drop all")), */
                    // Push button label
                    `Right( `PushButton(`id(`changes_button), _("Show c&hanges")))
				    ),
                `VSpacing(0.2)
                ),
            `HSpacing(1)
                )),
        `VSpacing(1)
		),
	`HSpacing(1.5));

    Wizard::RestoreBackButton ();

    Wizard::SetContentsButtons ( caption,
				contents,
	            HELPS["switch"]:"",
				CancelButtonLabel (),
				OKButtonLabel () );

    UI::ChangeWidget(`id(`modified), `Items, resources_as_items);

    if (resources_as_items == [] || resources_as_items == nil)
    {
        UI::ChangeWidget(`id(`modified), `Enabled, false);
        UI::ChangeWidget(`id(`save_button), `Enabled, false);
        UI::ChangeWidget(`id(`drop_button), `Enabled, false);
        UI::ChangeWidget(`id(`changes_button), `Enabled, false);
        UI::ChangeWidget(`id(`select_button), `Enabled, false);
    }
    else
        UI::ChangeWidget(`id(`modified), `CurrentItem,
            ProfileManager::active_resource);

    any ret = nil;
    while (true)
    {
	    ret = UI::UserInput ();
	    if (ret == `back)
            break;
        else if (ret ==`modified || ret ==`select_button)
        {
            ProfileManager::active_resource =
                UI::QueryWidget(`id(`modified), `CurrentItem);
            ProfileManager::SetSaveFlag();
            UI::ChangeWidget(`id(`modified), `Items,
                    ProfileManager::GetResourcesAsItems());
            UI::ChangeWidget(`id(`modified), `CurrentItem,
                    ProfileManager::active_resource);
        continue;
        }
        else if (ret == `save_button)
	    {
            ProfileManager::SaveSwitchInfo();
            UI::ChangeWidget(`id(`modified), `Items,
                    ProfileManager::GetResourcesAsItems());
            // is this necessary?
            UI::ChangeWidget(`id(`modified), `CurrentItem,
                    ProfileManager::active_resource);
            continue;
        }
        else if (ret == `drop_button)
        {
            ProfileManager::DropSwitchInfo();
            UI::ChangeWidget(`id(`modified), `Items,
                    ProfileManager::GetResourcesAsItems());
            // is this necessary?
            UI::ChangeWidget(`id(`modified), `CurrentItem,
                    ProfileManager::active_resource);
            continue;
        }
        else if (ret == `changes_button)
        {
            ProfileManager::active_resource =
                UI::QueryWidget(`id(`modified), `CurrentItem);
            ShowChangesPopup();
            continue;
        }
        else if (ret == `next)
	    {
            ProfileManager::Switch();
            ProgressPopup();
            if (!ProfileManager::Wait())
                // Error popup text
                UI::ErrorPopup(_("Switching was not succesful."));
            else
                ProfileManager::active_profile = selected;
	        break;
	    }
        };

    return ret;
}

/**
 * Popup for adding new profile
 * @return boolean true if user confirms action
 */
global define boolean AddProfilePopup() ``{

    map profiles = ProfileManager::profiles;

    UI::OpenDialog(`opt(`decorated), `HBox(`HSpacing(1.5),
        `VBox(
            `VSpacing(1),
			// Popup text, part 1/3
	        `Left(`Label(_("Add a new profile based"))),
            `VSpacing(1),
            `RadioButtonGroup(`id(`rb),
	            `VBox(
			        `Left(`RadioButton(`id(`new), `opt(`notify),
					    // Popup text, part 2/3
                        _("on the c&urrent system configuration"))),
                    `VSpacing(0.2),
                    `HBox(
                    `HSpacing(2),
					// Checkbox label, part 1/2
                 `CheckBox(`id(`auto), _("&Make the added profile the new active profile."))),
                    `HBox(
                    `HSpacing(4.5),
					// Checkbox label, part 2/2
                 `Label(`id(`autol),_("This does not save anything to the old active
profile nor does it start or stop services."))),
                   `VSpacing(1),
                    `Left(`RadioButton(`id(`copy), `opt(`notify),
					    // Popup text, part 3/3
                        _("on an &existing profile:")))
                    )),
            `SelectionBox(`id(`profiles),
                 "", maplist(`name, `desc, profiles, ``{ return name; })),
            `VSpacing(1),
	        `HBox(
	            `HSpacing(1),
	            `Left(`PushButton(`id(`cancel), CancelButtonLabel())),
	            `Right(`PushButton(`id(`ok), `opt(`default), OKButtonLabel())),
	            `HSpacing(1)
	            ),
            `VSpacing(1)),
        `HSpacing(1.5)
        ));

    UI::ChangeWidget(`id(`rb), `CurrentButton, `new);

    any ret = nil;
    while (true)
    {
        ret = UI::UserInput();
        if (ret == `new)
        {
            UI::ChangeWidget(`id(`profiles), `Enabled, false);
            UI::ChangeWidget(`id(`auto), `Enabled, true);
            UI::ChangeWidget(`id(`autol), `Enabled, true);
        }
        else if (ret == `copy)
        {
            UI::ChangeWidget(`id(`profiles), `Enabled, true);
            UI::ChangeWidget(`id(`auto), `Enabled, false);
            UI::ChangeWidget(`id(`autol), `Enabled, false);
        }
        else if (ret == `ok)
        {
            if (UI::QueryWidget(`id(`rb), `CurrentButton) == `copy)
            {
                string selected = UI::QueryWidget(`id(`profiles), `CurrentItem);
                if (selected == nil)
                {
					// Popup text
                    UI::MessagePopup(_("Select a profile to copy."));
                    continue;
                }
                ProfileManager::profile_action = "copy";
                ProfileManager::selected_profile = selected;
            }
            else
            {
                ProfileManager::profile_action = "new";
//                ProfileManager::selected_profile = ProfileManager::active_profile;
                ProfileManager::auto = UI::QueryWidget(`id(`auto), `Value);
            }
            break;
        }
        if (ret == `cancel)
            break;
    }

    UI::CloseDialog();

	if (ret == `ok)
		return true;
	else
		return false;
}

/**
 * Popup for showing progress informations
 * @return boolean true
 */
global define boolean ProgressPopup() ``{

    boolean close_popups = ProfileManager::close_popups;

    UI::OpenDialog(`opt(`decorated), `HBox(`HSpacing(1.5),
        `VBox(
            `VSpacing(1),
			// LogView label:
            `LogView(`id(`progress),_("Progress information"), 10, 0),
            `VSpacing(1),
/*            `ProgressBar(`id(`pb), "", 100, 0),
            `VSpacing(1),*/
			// checkbox label:
            `CheckBox(`id(`close_ch), `opt(`notify),_("Close progress pop-ups &automatically (reenable it in SCPM Setup)"),close_popups),
            `VSpacing(1),
	        `HBox(
	            `Right(`PushButton(`id(`close), `opt(`default), CloseButtonLabel())),
	            `HSpacing(1)
	            ),
            `VSpacing(1)),
        `HSpacing(1.5)
        ));

    UI::ChangeWidget(`id(`close), `Enabled, false);
//    UI::ChangeWidget(`id(`close_ch), `Enabled, false);

    string progresstext = "";
    integer hashmarks = 0;
    ProfileManager::last_ret = "";

    UI::BusyCursor();
    do
    {
        // this is strange:
        if (UI::PollInput() == `close_ch) {
            if (ProfileManager::close_popups)
                ProfileManager::close_popups = false;
            else ProfileManager::close_popups = true;
        }

        hashmarks = ProfileManager::GetHashMarks();
        sleep(10);
/*        UI::ChangeWidget(`id(`pb), `Value, hashmarks);*/

        progresstext = ProfileManager::GetProgressText(false);
        if (progresstext != "") {
            string recoded = UI::Recode(Console::encoding,"UTF-8",progresstext);
            UI::ChangeWidget(`id(`progress), `LastLine, recoded);
        }
    }
    while (hashmarks<100);

    // read to the end of file?
    progresstext = ProfileManager::GetProgressText(true);
    if (progresstext != "") {
        string recoded = UI::Recode(Console::encoding,"UTF-8",progresstext);
        UI::ChangeWidget(`id(`progress), `LastLine, recoded);
    }

    UI::NormalCursor();
    if (!close_popups)
    {
        UI::ChangeWidget(`id(`close), `Enabled, true);
        any ret = nil;
        while (ret != `close)
        {
            ret = UI::UserInput();
            if (ret == `close_ch) {
                if (ProfileManager::close_popups)
                    ProfileManager::close_popups = false;
                else ProfileManager::close_popups = true;
            }
        }
    }
    UI::CloseDialog();
    return true;
}

/**
 * Introduction popup
 * @return boolean true on success
 */
global define boolean IntroductionPopup() ``{

	// Inroduction text, part 1/2
    string intro_text = _("<p>SCPM is currently disabled.<br>
To enable it, use the Options button.<br></p>
") +

	// Inroduction text, part 2/2
 _("<p>If you are new to SCPM, read at least the help texts. It is better to read the introduction in the info pages. You should know what 'active profile' and 'current configuration' mean before using SCPM.</p>");

    UI::OpenDialog(`opt(`decorated), `HBox(`HSpacing(1.5),
        `VSpacing(15),
        `VBox(
            `HSpacing(40),
            `VSpacing(1),
            `RichText(intro_text),
            `VSpacing(1),
	        `HBox(
	            `HSpacing(1),
                // Push button label (read the intrduction before starting)

	            `PushButton(`id(`intro),`opt(`default), _("&Show introduction")),
                // Push button label (start without reading the intrduction)
	            `PushButton(`id(`cont), _("&Go")),
	            `HSpacing(1)
	            ),
            `VSpacing(1)),
        `HSpacing(1.5)
        ));

    any ret = nil;
    ret = UI::UserInput();
    UI::CloseDialog();

    if (ret == `intro)
    {
        IntroductionTextPopup();
//        ProfileManager::RunIntro();
    }

    ProfileManager::first_time = false;
    return true;
}

/**
 * Shows the text of scpm introduciton
 * @return boolean true on success
 */
global define boolean IntroductionTextPopup() ``{

/*    string info_text = ProfileManager::RunIntroApplication();

    if (info_text == "")
        return true;*/

    UI::OpenDialog(`opt(`decorated), `HBox(`HSpacing(1.5),
        `VSpacing(30),
        `VBox(
            `HSpacing(80),
            `VSpacing(1),
            `RichText(`id(`info),""),
            `VSpacing(1),
            `PushButton(`id(`ok), `opt(`default), OKButtonLabel()),
            `VSpacing(1)),
        `HSpacing(1.5)
        ));
    UI::ChangeWidget(`id(`info), `Value, HELPS["intro"]:"");
    any ret = UI::UserInput();
    UI::CloseDialog();
    return true;
}

/**
 * Popup which shows changes of selected resource
 * @return boolean true on success
 */
global define boolean ShowChangesPopup() ``{

    string changes = ProfileManager::ShowChanges();

    UI::OpenDialog(`opt(`decorated), `HBox(`HSpacing(1.5),
        `VSpacing(15),
        `VBox(
            `HSpacing(50),
            `VSpacing(1),
			// Popup text
            `Label(_("Changes to the resource")),
            `Label(ProfileManager::active_resource_name),
            `VSpacing(1),
            `RichText(changes),
            `VSpacing(1),
            `PushButton(`id(`ok), `opt(`default), OKButtonLabel()),
            `VSpacing(1)),
        `HSpacing(1.5)
        ));

    any ret = UI::UserInput();
    UI::CloseDialog();

    return true;
}

/* not impl.yet
efine string CopyResourcePopup() ``{

    return "new";
}
*/

/* EOF */
}
