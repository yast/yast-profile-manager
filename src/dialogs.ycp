/**
 * File:	include/profile-manager/dialogs.ycp
 * Package:	Configuration of profile-manager
 * Summary:	Dialogs definitions
 * Authors:	Jiri Suchomel <jsuchome@suse.cz>
 *
 * $Id$
 */

{

textdomain "profile-manager";

import "ProfileManager";
import "Console";
import "Runlevel";

include "ui/common_popups.ycp";
include "ui/common_messages.ycp";
include "ui/file_popups.ycp";

include "profile-manager/helps.ycp";
include "profile-manager/routines.ycp";

/**
 * Profile settings dialog
 * @return any Returned value from UserInput() call
 */
global define any ProfileSettingsDialog () ``{

    string edited = ProfileManager::selected_profile;
    string action = ProfileManager::profile_action;
    map profiles = ProfileManager::profiles;

    // reading the profile settings
    ProfileManager::GetProfile();

    map settings = ProfileManager::profile_settings;

	// Dialog caption label
    string caption = _("Special profile settings");
    term contents = `HBox(`HSpacing(1.5),
        `VBox(
        `VSpacing(1),
		// frame label
        `Frame(_("Special profile settings"), `HBox(`HSpacing(1),
            `VBox(
                `VSpacing(0.2),
                // Text entry label
                `TextEntry(`id(`name),_("Pro&file Name")),
                `VSpacing(0.2),
                `HBox(
                    `HSpacing(0.5),
                    // Text entry label (profile description)
                    `MultiLineEdit(`id(`desc),_("&Description")),
                    `HSpacing(0.5)
                    ),
                `VSpacing(0.2),
                // Text entry label
                `TextEntry(`id(`prestart),_("Pr&e Start Script")),
                `VSpacing(0.2),
                // Text entry label
                `TextEntry(`id(`poststart),_("Po&st Start Script")),
                `VSpacing(0.2),
                // Text entry label
                `TextEntry(`id(`prestop),_("P&re Stop Script")),
                `VSpacing(0.2),
                // Text entry label
                `TextEntry(`id(`poststop),_("Pos&t Stop Script")),
                `VSpacing(0.2),
                `Left(`CheckBox(`id(`secure_ch),
				// checkbox label
                    _("Set file &permissions of all scripts secure (0700)."))),
                `VSpacing(0.2)
            ),
            `HSpacing(1))),
	    `VSpacing(1)),
        `HSpacing(1.5));


    Wizard::RestoreBackButton ();

    Wizard::SetContentsButtons ( caption,
				contents,
                HELPS["profilesettings"]:"",
				CancelButtonLabel (),
				OKButtonLabel () );

    UI::ChangeWidget(`id(`desc), `Value, lookup(settings,"description",""));
    UI::ChangeWidget(`id(`prestart), `Value, lookup(settings,"prestart",""));
    UI::ChangeWidget(`id(`poststart), `Value, lookup(settings,"poststart",""));
    UI::ChangeWidget(`id(`prestop), `Value, lookup(settings,"prestop",""));
    UI::ChangeWidget(`id(`poststop), `Value, lookup(settings,"poststop",""));
    if (action == "edit")
        UI::ChangeWidget(`id(`name), `Value, edited);
    else
        UI::SetFocus(`id(`name));

    any ret = nil;
    while (true)
    {
	ret = UI::UserInput ();
	if (ret == `back || ret == `cancel)
	{
	    break;
	}
    else if (ret == `next)
	{
        boolean secure = UI::QueryWidget(`id(`secure_ch), `Value);
        string selected = UI::QueryWidget(`id(`name), `Value);

        if (!ProfileManager::CheckNameValidity(selected))
        {
			// Popup text (wrong data):
            UI::MessagePopup(_("Choose valid name."));
            continue;
        }

        map new_settings = $[];
        new_settings = add (new_settings, "prestart", UI::QueryWidget(`id(`prestart), `Value));
        new_settings = add (new_settings, "poststart", UI::QueryWidget(`id(`poststart), `Value));
        new_settings = add (new_settings, "prestop", UI::QueryWidget(`id(`prestop), `Value));
        new_settings = add (new_settings, "poststop", UI::QueryWidget(`id(`poststop), `Value));

        if (!ProfileManager::CheckFilesValidity(new_settings))
        {
			// Popup text (file paths are wrong):
			UI::MessagePopup(_("Choose valid paths to scripts."));
            continue;
        }

        // we don't need to check description
        new_settings = add (new_settings, "name", selected);
        new_settings = add (new_settings, "description", UI::QueryWidget(`id(`desc), `Value));

        if (action == "new")
        {
            if (lookup(profiles, selected, nil) != nil)
            {
				// Popup text:
                UI::MessagePopup(_("A profile with this name already exists."));
                continue;
            }
            ProfileManager::AddProfile(selected);
            ProgressPopup("", 0, 100);
            if (!ProfileManager::Wait())
            {
                // Error popup text, %1 is additional translated error message
                UI::ErrorPopup(sformat(_("Adding new profile was not successful:
%1
"), ProfileManager::scpm_error));
                // continue;
            }
            else
            {
                ProfileManager::profiles = add (ProfileManager::profiles,
                        selected, "");

                if (ProfileManager::auto)
                    ProfileManager::active_profile = selected;

                ProfileManager::profile_settings = new_settings;
                if (!ProfileManager::SetProfile(selected))
                {
                    UI::ErrorPopup(sformat(
                        // Error popup text, %1 is additional error message
                        _("Writing profile settings was not successful:
%1
"),
                        ProfileManager::scpm_error));
                }
            }
        }
        else if (action == "copy")
        {
            if (lookup(profiles, selected, nil) != nil)
            {
				// Popup text
                UI::MessagePopup(_("A profile with this name already exists."));
                continue;
            }
            ProfileManager::CopyProfile(edited, selected);
            ProgressPopup("",0,100);
            if (!ProfileManager::Wait())
            {
                // Error popup text, %1 is additional translated error message
                UI::ErrorPopup(sformat(_("Copying profile was not successful:
:%1
"), ProfileManager::scpm_error));
                //    continue;
            }
            else
            {
                ProfileManager::profiles = add (ProfileManager::profiles,
                        selected, "");

                ProfileManager::profile_settings = new_settings;
                if (!ProfileManager::SetProfile(selected))
                {
                    UI::ErrorPopup(sformat(
                        // Error popup text, %1 is additional error message
                        _("Writing profile settings was not successful:
%1
"),
                        ProfileManager::scpm_error));
                }
            }
        }
        else if (action == "edit")
        {
            if (selected != edited)
            {

                if (lookup(profiles, selected, nil) != nil)
                {
					// Popup text
                    UI::MessagePopup(_("A profile with this name already exists."));
                    continue;
                }
                if (!ProfileManager::RenameProfile(edited, selected))
                {
                    // Error popup text, %1 is additional error text
                    UI::ErrorPopup(sformat(_("Renaming profile was not successful:
%1
"), ProfileManager::scpm_error));
                    continue;
                }
            }
            if (ProfileManager::ModifiedSettings(new_settings))
            {
                ProfileManager::profile_settings = new_settings;
                if (!ProfileManager::SetProfile(selected))
                {
                    // Error popup text, %1 is additional error message
                    UI::ErrorPopup(sformat(
                        _("Writing profile settings was not successful:
%1
"),
                        ProfileManager::scpm_error));
                }
            }
        }
        if (secure)
            ProfileManager::SetFilePermitions();
	    break;
	}
    };

    return ret;
}

/**
 * Switch dialog
 * @return any Returned value from UserInput() call
 */
global define any SwitchDialog () ``{

    // FIXME: workaround for resource groups
    boolean use_rg = ProfileManager::use_rg;
    string active_group = "";

    string active = ProfileManager::active_profile;
    string selected = ProfileManager::selected_profile;

    // Dialog caption label
    string caption = _("Confirm Switch");
    term contents = `HBox( //-------------- dialog for switching resource sets
	`HSpacing(1.5),
	`VBox(
        `VSpacing(1),
        `HBox(
            `HSpacing(1),
            // Label text
            `Label(_("Active Profile:")),
            `Right(`Heading(active)),
            `HSpacing(2)
            ),
        `VSpacing(0.2),
        `HBox(
            `HSpacing(1),
            // Label text
            `Left(`Label(_("New Profile:"))),
            `Right(`Heading(selected)),
	    `HStretch(),
            `HSpacing(2)
            ),
        `VSpacing(1),
		// frame label
        `Frame(_("Modified Resources of Active Profile"), `HBox(`HSpacing(1),
            `VBox(
                `VSpacing(0.2),
		        `Table(`id(`modified),`opt(`notify),
                    `header(
                            // Header of the table with modified resources 1/4
                            _("save"),
                            // Header of the table with modified resources 2/4
                            _("flags"),
                            // Header of the table with modified resources 3/4
                            _("Resource"),
                            // Header of the table with modified resources 4/4
                            _("type")),
                    []
                    ),
                `VSpacing(0.2),
		        `HBox(
		            `PushButton(`id(`select_button), `opt(`key_F3),
                        // Push button label
                        _("&Select or Deselect")),
		            `PushButton(`id(`save_button), `opt(`key_F4),
                        // Push button label
                        _("Select &All")),
		            `PushButton(`id(`drop_button), `opt(`key_F5),
                        // Push button label
                        _("&Deselect all")),
                    `Right( `PushButton(`id(`changes_button), `opt(`key_F2),
                        // Push button label
                        _("Show c&hanges")))
				    ),
                `VSpacing(0.2)
                ),
            `HSpacing(1)
                )),
        `VSpacing(1)
		),
	`HSpacing(1.5));

    if (use_rg) //----------------------- dialog for switching resource groups
	contents = `HBox( `HSpacing(1.5),`VBox(
	`VSpacing(1),
        `HBox(
            `HSpacing(1),
            // Label text
            `Left(`Label(_("Active Profile"))),
            `Right(`Label(active)),
            `HSpacing(2)
            ),
        `VSpacing(0.2),
        `HBox(
            `HSpacing(1),
            // Label text
            `Left(`Heading(_("New Profile"))),
            `Left(`Heading(selected)),
	    `HStretch(),
            `HSpacing(2)
            ),
        `VSpacing(1),
	// frame label
        `Frame(_("Modified Resource Groups of Active Profile"),
	    `HBox(`HSpacing(1),
            `VBox(
                `VSpacing(0.2),
		`Table(`id(`modified),`opt(`notify),
                    `header(
                            "",
                            // Header of the table with modified resources 2/2
                            _("Resource Group"),
                            // Header of the table with modified resources 3/3
                            _("Description")),
                    []
                    ),
                `VSpacing(0.2),
		`HBox(
		    `PushButton (`id(`save_b), `opt(`key_F4),
			// Push button label
			_("&Save / Ignore")),
		    /*
		    `PushButton (`id(`ignore_b), `opt(`key_F5),
			// Push button label
			_("&Ignore")),
			*/
                    `Right(`PushButton(`id (`details), `opt(`key_F2),
                        // Push button label
                        _("&Details")))
		),
                `VSpacing(0.2)
            ),
            `HSpacing(1)
            )),
        `VSpacing(1)
	),
	`HSpacing(1.5));


    Wizard::RestoreBackButton ();

    Wizard::SetContentsButtons ( caption, contents, HELPS["switch"]:"",
				CancelButtonLabel (), OKButtonLabel () );

    list resources_as_items = (!use_rg)? ProfileManager::GetResourcesAsItems():
	ProfileManager::GetGroupsAsItems();

    UI::ChangeWidget(`id(`modified), `Items, resources_as_items);

    if (resources_as_items == [] || resources_as_items == nil)
    {
        UI::ChangeWidget(`id(`modified), `Enabled, false);
	if (use_rg)
	{
	    UI::ChangeWidget(`id(`save_b), `Enabled, false);
//	    UI::ChangeWidget(`id(`ignore_b), `Enabled, false);
	    UI::ChangeWidget(`id(`details), `Enabled, false);
	}
	else
	{
	    UI::ChangeWidget(`id(`save_button), `Enabled, false);
	    UI::ChangeWidget(`id(`drop_button), `Enabled, false);
	    UI::ChangeWidget(`id(`changes_button), `Enabled, false);
	    UI::ChangeWidget(`id(`select_button), `Enabled, false);
	}
    }
    else
    {
	if (use_rg)
	{
	    active_group = ProfileManager::current_resource_group;
	    if (active_group == "")
		active_group = select (resources_as_items[0]:[],2,"");
	    UI::ChangeWidget(`id(`modified), `CurrentItem,
		active_group);
	}
	else
	{
	    UI::ChangeWidget(`id(`modified), `CurrentItem,
		ProfileManager::active_resource);
	}
	UI::SetFocus(`id(`modified));
    }

    any ret = nil;
    while (true)
    {
	ret = UI::UserInput ();

	// FIXME: string|integer instead of any
	any selected = UI::QueryWidget(`id(`modified), `CurrentItem);
	if (ret == `back || ret == `cancel)
	{
            break;
	}
	// only for resource groups
	else if (contains ([`save_b,`ignore_b, `modified], ret) && use_rg)
	{
	    // FIXME: disable changing when modified is set or
	    // unset "modified" flag sometimes (when we are on default_save)?
	    boolean set = ProfileManager::SetGroupSaveFlag (selected);
	    UI::ChangeWidget(`id(`modified), `Item (selected,0), set ? "X":"");
	}
	// only for resource groups!
	else if (ret == `details)
	{
	    ProfileManager::current_resource_group = selected;
	    break;
	}
        else if (ret ==`modified || ret ==`select_button)
        {
            ProfileManager::active_resource =
                UI::QueryWidget(`id(`modified), `CurrentItem);
            ProfileManager::SetSaveFlag();
            UI::ChangeWidget(`id(`modified), `Items,
                    ProfileManager::GetResourcesAsItems());
            UI::ChangeWidget(`id(`modified), `CurrentItem,
                    ProfileManager::active_resource);
	    continue;
        }
        else if (ret == `save_button)
	{
            ProfileManager::SaveSwitchInfo();
            UI::ChangeWidget(`id(`modified), `Items,
                    ProfileManager::GetResourcesAsItems());
            // is this necessary? TODO change only one item
            UI::ChangeWidget(`id(`modified), `CurrentItem,
                    ProfileManager::active_resource);
            continue;
        }
        else if (ret == `drop_button)
        {
            ProfileManager::DropSwitchInfo();
            UI::ChangeWidget(`id(`modified), `Items,
                    ProfileManager::GetResourcesAsItems());
            // is this necessary?
            UI::ChangeWidget(`id(`modified), `CurrentItem,
                    ProfileManager::active_resource);
            continue;
        }
        else if (ret == `changes_button)
        {
            ProfileManager::active_resource =
                UI::QueryWidget(`id(`modified), `CurrentItem);
            ShowChangesPopup();
            continue;
        }
        else if (ret == `next)
	{
            // saving changes: not necessary if "drop all" is checked
            ProfileManager::Save();
            ProgressPopup("first",0,15);
            if (!ProfileManager::Wait())
            {
                // Error popup text, %1 is additional translated error message
                UI::ErrorPopup (sformat(_("Saving the profile was not successful:
%1
"),
                    ProfileManager::scpm_error));
                break;
            }
            ProfileManager::Switch();
            ProgressPopup("last",15,100);
            if (!ProfileManager::Wait())
                // Error popup text, %1 is additional translated error message
                UI::ErrorPopup (sformat(_("Switching was not successful:
%1
"),
                    ProfileManager::scpm_error));
            else
                ProfileManager::active_profile = selected;
	    break;
	    // FIXME active profile was not seleceted after switch!
	    }
        };

    return ret;
}

/**
 * Dialog with switch details of one resource group
 * @return any Returned value from UserInput() call
 */
global define symbol DetailsSwitchDialog () ``{

    /**
     * helper function for building table items with modified resources
     */
    define list resources_items() ``{

	list items = [];
	foreach (`i, `resource, resources, ``{
	    if (!is(i, integer))
		return;
	    // flag for resource action
	    string save = _("save");
	    if (resource["save_mode"]:"normal" == "normal")
	    {
		if (!resource["save"]:true)
		    // flag for resource action
		    save = _("ignore");
	    }
	    else if (resource["save_mode"]:"normal" == "save_all")
		// flag for resource action
		save = _("all");
	    else if (resource["save_mode"]:"normal" == "patch_all")
		// flag for resource action
		save = _("patch");

	    string flag = "";
	    if (resource["is_new"]:false)
		// flag
		flag = _("NEW");
	    else if (resource["is_deleted"]:false)
		// flag
		flag = _("DELETED");

	    items = add (items, `item(
		`id(i), save, resource["resource_name"]:"",
		resource["resource_type"]:"", flag));
	});
	return items;
    }

    list actions_list = [
	 `item(`id(`save), _("&Save")),
	 `item(`id(`ignore), _("&Ignore")),
	 `item(`id(`save_p), _("Save to &all profiles")),
	 `item(`id(`patch), _("&Patch all profiles")),
	// TODO: own button for "all resources"?
	 `item(`id(`save_all), _("Save all &resources")),
	 `item(`id(`ignore_all), _("I&gnore all resources"))
    ];
    list show_list = [
	 `item(`id(`show_ch), _("Sho&w changes")),
	 `item(`id(`show_r), _("Show &resource"))
    ];
    string groupname = ProfileManager::current_resource_group;

    // Caption of the dialog:
    string caption = _("Resource Group Details");

    term contents = `HBox(
	`HSpacing(1.5),
	`VBox(
        `VSpacing(1),
        `HBox(
            `HSpacing(1),
            // Label text
            `Left(`Label(_("Resource Group"))),
            `Right(`Label(groupname)),
            `HSpacing(2)
            ),
        `VSpacing(1),
	// frame label:
        `Frame(_("Modified Resources"), `HBox(`HSpacing(1),
            `VBox(
                `VSpacing(0.2),
		`Table(`id(`resources), `opt (`notify),
                    `header(
                        // Header of the table with resources 1/4
                        _("Action"),
                        // Header of the table with resources 2/4
                        _("Resource"),
                        // Header of the table with resources 3/4
                        _("Type"),
                        // Header of the table with resources 4/4
                        _("Flags")),
                    []
                ),
                `VSpacing(0.2),
		`HBox(
		    // menubutton label
		    `MenuButton(`id(`action_b), `opt(`key_F3), _("&Action"),
			actions_list),
		    `Left(
			// menubutton label
			`MenuButton(`id(`show_b), `opt(`key_F2), _("&Show"),
			    show_list))
		),
		`VSpacing(0.2)
                ),
            `HSpacing(1)
        )),
        `VSpacing(1)
	),
	`HSpacing(1.5)
    );

    Wizard::SetContentsButtons ( caption, contents, HELPS["switchdetails"]:"",
                BackButtonLabel (), OKButtonLabel () );

    Wizard::ReplaceAbortButton (`Empty());

    map resources = ProfileManager::GetModifiedGroupResources(groupname);
    list items = resources_items();
    UI::ChangeWidget(`id(`resources), `Items, items);

    if (items != [])
	UI::SetFocus(`id(`resources));

    any ret = nil;
    integer selected = 0;
    while (true)
    {
	ret = UI::UserInput ();
	selected = UI::QueryWidget(`id(`resources), `CurrentItem);

	if (ret == `resources)
	{
	    if (resources[selected,"save_mode"]:"" == "normal")
	    {
		resources[selected,"save"] = !resources[selected, "save"]:false;
		UI::ChangeWidget (`id(`resources), `Item (selected,0),
		    resources[selected,"save"]:false ? _("save"):_("ignore"));
	    }
	    continue;
	}
	else if (ret ==`save)
	{
	    resources[selected,"save"] = true;
	    resources[selected,"save_mode"] = "normal";
	    UI::ChangeWidget (`id(`resources), `Item (selected,0),_("save"));
	}
	else if (ret ==`ignore)
	{
	    resources[selected,"save"] = false;
	    resources[selected,"save_mode"] = "normal";
	    UI::ChangeWidget (`id(`resources), `Item (selected,0),_("ignore"));
	}
	else if (ret ==`save_p)
	{
	    resources[selected,"save"] = true;
	    resources[selected,"save_mode"] = "save_all";
	    UI::ChangeWidget (`id(`resources), `Item (selected,0),_("all"));
	}
	else if (ret ==`patch)
	{
	    resources[selected,"save"] = true;
	    resources[selected,"save_mode"] = "patch_all";
	    UI::ChangeWidget (`id(`resources), `Item (selected,0),_("patch"));
	}
	else if (ret ==`save_all)
	{
	    foreach (`name, `resource, resources, ``{
		resource["save"] = true;
		resource["save_mode"] = "normal";
		UI::ChangeWidget (`id(`resources), `Item (name,0),_("save"));
	    });
	}
	else if (ret ==`ignore_all)
	{
	    foreach (`name, `resource, resources, ``{
		resource["save"] = false;
		resource["save_mode"] = "normal";
		UI::ChangeWidget (`id(`resources), `Item (name,0),_("ignore"));
	    });
	}
	else if (ret == `back || ret == `cancel)
	{
	    // throw away changes
	    break;
	}
	else if (ret == `next)
	{
	    ProfileManager::CheckAndUpdateResources (groupname, resources);
	    break;
	}
    };

    return ret;
}

/**
 * Popup for adding new profile
 * @return boolean true if user confirms action
 */
global define boolean AddProfilePopup() ``{

    map profiles = ProfileManager::profiles;

    UI::OpenDialog(`opt(`decorated), `HBox(`HSpacing(1.5),
        `VBox(
            `VSpacing(1),
			// Popup text, part 1/3
	        `Left(`Label(_("Add a new profile based"))),
            `VSpacing(1),
            `RadioButtonGroup(`id(`rb),
	            `VBox(
			        `Left(`RadioButton(`id(`new), `opt(`notify),
					    // Popup text, part 2/3
                        _("on the c&urrent system configuration"))),
                    `VSpacing(0.2),
                    `HBox(
                    `HSpacing(2),
					// Checkbox label, part 1/2
                 `CheckBox(`id(`auto), _("&Make the added profile the new active profile."))),
                    `HBox(
                    `HSpacing(4.5),
					// Checkbox label, part 2/2
                 `Label(`id(`autol),_("This does not save anything to the old active
profile nor does it start or stop services."))),
                   `VSpacing(1),
                    `Left(`RadioButton(`id(`copy), `opt(`notify),
					    // Popup text, part 3/3
                        _("on an &existing profile:")))
                    )),
            `SelectionBox(`id(`profiles),
                 "", maplist(`name, `desc, profiles, ``{ return name; })),
            `VSpacing(1),
	    // FIXME what about styleguide? (=OK on the left)
	        `HBox(
	            `HSpacing(1),
	            `Left(`PushButton(`id(`cancel), `opt (`key_F9),
                    CancelButtonLabel())),
	            `Right(`PushButton(`id(`ok), `opt(`default, `key_F10),
                    OKButtonLabel())),
	            `HSpacing(1)
	            ),
            `VSpacing(1)),
        `HSpacing(1.5)
        ));

    UI::ChangeWidget(`id(`rb), `CurrentButton, `new);

    any ret = nil;
    while (true)
    {
        ret = UI::UserInput();
        if (ret == `new)
        {
            UI::ChangeWidget(`id(`profiles), `Enabled, false);
            UI::ChangeWidget(`id(`auto), `Enabled, true);
            UI::ChangeWidget(`id(`autol), `Enabled, true);
        }
        else if (ret == `copy)
        {
            UI::ChangeWidget(`id(`profiles), `Enabled, true);
            UI::ChangeWidget(`id(`auto), `Enabled, false);
            UI::ChangeWidget(`id(`autol), `Enabled, false);
        }
        else if (ret == `ok)
        {
            if (UI::QueryWidget(`id(`rb), `CurrentButton) == `copy)
            {
                string selected = UI::QueryWidget(`id(`profiles), `CurrentItem);
                if (selected == nil)
                {
					// Popup text
                    UI::MessagePopup(_("Select a profile to copy."));
                    continue;
                }
                ProfileManager::profile_action = "copy";
                ProfileManager::selected_profile = selected;
            }
            else
            {
                ProfileManager::profile_action = "new";
//                ProfileManager::selected_profile = ProfileManager::active_profile;
                ProfileManager::auto = UI::QueryWidget(`id(`auto), `Value);
            }
            break;
        }
        if (ret == `cancel)
            break;
    }

    UI::CloseDialog();

	if (ret == `ok)
		return true;
	else
		return false;
}

/**
 * Popup for showing progress informations
 * @param position of this progress:
 *  (if "first", popup is not closed, for "last" popup is not created)
 * @param start start of progress (mainly 0)
 * @param end end of progress (mainly 100)
 * @return boolean true
 */
global define boolean ProgressPopup(string position, integer start, integer end) ``{

    boolean close_popups = ProfileManager::close_popups;

    if (position != "last")
    {
    UI::OpenDialog(`opt(`decorated), `HBox(`HSpacing(1.5),
        `VBox(
            `VSpacing(1),
			// LogView label:
            `LogView(`id(`progress),_("Progress information"), 10, 0),
            `VSpacing(1),
            `ProgressBar(`id(`pb), "", 100, 0),
            `VSpacing(1),
	    // checkbox label:
            `CheckBox(`id(`close_ch), `opt(`notify), _("Close progress pop-ups &automatically (reenable it in SCPM Setup)"),close_popups),
            `VSpacing(1),
	        `HBox(
	            `Right(`PushButton(`id(`close), `opt(`default, `key_F10),
                    CloseButtonLabel())),
	            `HSpacing(1)
	            ),
            `VSpacing(1)),
        `HSpacing(1.5)
        ));

    UI::ChangeWidget(`id(`close), `Enabled, false);
    }

    string progresstext = "";
    integer hashmarks = start;
    ProfileManager::last_ret = "";

    UI::BusyCursor();
    do
    {
        sleep(5);
        hashmarks = ProfileManager::GetHashMarks();
        UI::ChangeWidget(`id(`pb), `Value, hashmarks);

        progresstext = ProfileManager::GetProgressText(false);
        if (progresstext != "") {
            string recoded = UI::Recode(Console::encoding,"UTF-8",progresstext);
            UI::ChangeWidget(`id(`progress), `LastLine, recoded);
        }
    }
    while (hashmarks < end);

    // next hundred of hash marks
    if (hashmarks >= 100)
        ProfileManager::hash_size = ProfileManager::hash_size + 1;

    // read to the end of file
    progresstext = ProfileManager::GetProgressText(true);
    if (progresstext != "") {
        string recoded = UI::Recode(Console::encoding,"UTF-8",progresstext);
        UI::ChangeWidget(`id(`progress), `LastLine, recoded);
    }
    if (position == "first") // hack: missing newline
        UI::ChangeWidget(`id(`progress), `LastLine, "\n");

    UI::NormalCursor();
    if (position != "first")
    {
        if (!close_popups)
        {
            UI::ChangeWidget(`id(`close), `Enabled, true);
            any ret = nil;
            while (ret != `close)
            {
                ret = UI::UserInput();
            }
        }
        ProfileManager::close_popups = UI::QueryWidget(`id(`close_ch), `Value);
        UI::CloseDialog();
    }
    return true;
}

/**
 * Introduction popup
 * @return boolean true on success
 */
global define boolean IntroductionPopup() ``{

	// Inroduction text, part 1/2
    string intro_text = _("<p>SCPM is currently disabled.<br>
To enable it, use the Options button.<br></p>
") +

	// Inroduction text, part 2/2
 _("<p>If you are new to SCPM, read at least the help texts. It is better to read the introduction in the info pages. You should know what 'active profile' and 'current configuration' mean before using SCPM.</p>");

    UI::OpenDialog(`opt(`decorated), `HBox(`HSpacing(1.5),
        `VSpacing(15),
        `VBox(
            `HSpacing(40),
            `VSpacing(1),
            `RichText(intro_text),
            `VSpacing(1),
	      `HBox(
		`HSpacing(1),
		// Push button label (read the intrduction before starting)
		`PushButton(`id(`intro),`opt(`default),_("&Show introduction")),
                // Push button label (start without reading the intrduction)
	        `PushButton(`id(`cont), _("&Go")),
	        `HSpacing(1)
	      ),
            `VSpacing(1)),
        `HSpacing(1.5)
        ));

    any ret = nil;
    ret = UI::UserInput();
    UI::CloseDialog();

    if (ret == `intro)
    {
        IntroductionTextPopup();
    }

    ProfileManager::first_time = false;
    return true;
}

/**
 * Shows the text of scpm introduciton
 * @return boolean true on success
 */
global define boolean IntroductionTextPopup() ``{

    UI::OpenDialog(`opt(`decorated), `HBox(`HSpacing(1.5),
        `VSpacing(30),
        `VBox(
            `HSpacing(80),
            `VSpacing(1),
            `RichText(`id(`info),""),
            `VSpacing(0.5),
            `PushButton(`id(`ok), `opt(`default, `key_F10), OKButtonLabel()),
            `VSpacing(0.5)),
        `HSpacing(1.5)
        ));
    UI::ChangeWidget(`id(`info), `Value, HELPS["intro"]:"");
    any ret = UI::UserInput();
    UI::CloseDialog();
    return true;
}

/**
 * Popup which shows changes of selected resource
 * @return boolean true on success
 */
global define boolean ShowChangesPopup() ``{

    string changes = ProfileManager::ShowChanges();
    string recoded = UI::Recode(Console::encoding,"UTF-8", changes);

    UI::OpenDialog(`opt(`decorated), `HBox(`HSpacing(1.5),
        `VSpacing(25),
        `VBox(
            `HSpacing(70),
            `VSpacing(1),
			// Popup text
            `Label(_("Changes to the resource")),
            `Label(ProfileManager::active_resource_name),
            `VSpacing(1),
            `RichText(recoded),
            `VSpacing(1),
            `PushButton(`id(`ok), `opt(`default, `key_F10), OKButtonLabel()),
            `VSpacing(1)),
        `HSpacing(1.5)
        ));

    any ret = UI::UserInput();
    UI::CloseDialog();

    return true;
}

/**
 * Resource configuration dialog
 * @return any Returned value from UserInput() call
 */
global define symbol ConfigureResourcesDialog () ``{

    map resource_groups = ProfileManager::GetResourceGroups();

    /**
     * helper function for building table items with resource groups
     */
    define list resource_groups_items() ``{

	list items = [];
	foreach (`name, `group, resource_groups, ``{
	    if (group["what"]:"" == "deleted")
		return;
	    if (group["active"]:false)
		items = add (items,
		    `item(`id(name),"X", name, group["description"]:""));
	    else
		items = add (items,
		    `item(`id(name),"", name, group["description"]:""));
	});
	return items;
    }

    // Caption of the dialog:
    string caption = _("Configuration of Resource Groups");

    term contents = `HBox(
	`HSpacing(1.5),
	`VBox(
        `VSpacing(1),
	// frame label:
        `Frame(_("Select Resource Group"), `HBox(`HSpacing(1),
            `VBox(
                `VSpacing(0.2),
		    `Table(`id(`rgroups), `opt (`notify),
                    `header(
                        " ",
                        // Header of the table with resource groups 2/3
                        _("Name"),
                        // Header of the table with resource groups 3/3
                        _("Description")),
                    []
                    ),
                `VSpacing(0.2),
		`HBox(
                    // Push button label
		    `PushButton(`id(`add_button), `opt(`key_F3), _("&Add")),
                    // Push button label
		    `PushButton(`id(`edit_button), `opt(`key_F4),_("&Edit")),
		    `Left(
                    // Push button label
		    `PushButton(`id(`delete_button),`opt(`key_F5),_("&Delete")))
		    ),
		`VSpacing(0.2)
                ),
            `HSpacing(1)
        )),
        `VSpacing(1)
	),
	`HSpacing(1.5)
    );

    Wizard::SetContentsButtons ( caption, contents, HELPS["resources"]:"",
                BackButtonLabel (), OKButtonLabel () );

    Wizard::ReplaceAbortButton (`Empty());

    list items = resource_groups_items();
    UI::ChangeWidget(`id(`rgroups), `Items, items);

    if (items != [])
	UI::SetFocus(`id(`rgroups));

    any ret = nil;
    string selected = "";
    while (true)
    {
	ret = UI::UserInput ();
	selected = UI::QueryWidget(`id(`rgroups), `CurrentItem);
	if (ret == `delete_button)
	{
	    if (!(resource_groups[selected, "user_defined"]:false))
		// Popup text (user wants to delete predefined resource group)
		UI::MessagePopup(_("You cannot delete predefined resource group."));
	    else
	    {
		resource_groups[selected, "what"] = "deleted";
		UI::ChangeWidget(`id(`rgroups),`Items, resource_groups_items());
	    }
	    continue;
	}
	else if (ret == `add_button || ret == `edit_button)
	{
	    map group = $[];
	    if (ret == `add_button)
		group = ResourceGroupPopup($[]);
	    else
		group = ResourceGroupPopup(eval(resource_groups[selected]:$[]));
	    if (group != $[])
	    {
		// if name was changed, mark the old key as deleted
		if (haskey (resource_groups, group["org_name"]:""))
		{
		    resource_groups[group["org_name"]:"", "what"] = "deleted";
		    remove (group, "org_name");
		}
		resource_groups[group["name"]:""] = group;
		UI::ChangeWidget(`id(`rgroups),`Items, resource_groups_items());
		UI::ChangeWidget(`id(`rgroups), `CurrentItem, group["name"]:"");
	    }
	    continue;
	}
	else if (ret == `rgroups)
	{
	    boolean active = !resource_groups[selected, "active"]:false;
	    resource_groups[selected,"active"] = active;
	    UI::ChangeWidget (`id(`rgroups),`Item (selected, 0), active?"X":"");
	}
	else if (ret == `back || ret == `cancel)
	{
	    // throw away changes
	    break;
	}
	else if (ret == `next)
	{
	    // really delete/add/modify
	    // TODO now copy local structure to global resource_groups
	    if (UI::YesNoPopup (_("Apply changes to Resource Groups?")))
	    {
		y2milestone ("changes applied");
		foreach (`name, `group, resource_groups, ``{
		    // edited/added/modifies -> SetResourceGroup
		    if (group["what"]:"" != "")
			y2internal ("changed: %1", group);

		    // (de)activated -> (De)Activate
		});
		// FIXME temporary -> save in Options dialog...
		ProfileManager::UpdateResourceGroups(resource_groups);
	    }
	    break;
	}
    };

    return ret;
}

/**
 * popup for entering new service for resource group
 * @return service name; empty string on cancel
 */
global define string GetService() ``{

    // read the list of services...
    map services = SCR::Read (.init.scripts.comments);
    list service_items = [];

    foreach (map k, map v, services, ``{
	service_items = add (service_items,
	    `item( `id(k), k, false));
    });

    string service = "";
    UI::OpenDialog( `opt(`decorated), `HBox(
	`HSpacing(1),
	`VBox(
	    `VSpacing(0.2),
	    // text entry label
//	    `TextEntry(`id(`service), _("&Service:"), ""),
	    `HBox (
		// text entry label
		`TextEntry(`id(`service), _("&Service:"), ""),
		`HSpacing (1),
		`VBox (
		    `Label(""),
		    // button label
		    `PushButton (`id (`choose), `opt (`key_F6), _("Choo&se"))
		)
	    ),
	    `VSpacing(0.2),
	    `HBox(
		`PushButton(`id(`ok),`opt(`default, `key_F10), OKButtonLabel()),
		`PushButton(`id(`cancel), `opt (`key_F9), CancelButtonLabel())
	    ),
	    `VSpacing(0.2)),
	`HSpacing(1)
    ));

    UI::SetFocus (`id (`service));

    any ret = nil;
    do {
	ret = UI::UserInput();
	service = UI::QueryWidget(`id(`service), `Value);

	if (ret == `cancel)
	{
	    service = "";
	}
	else if (ret == `choose)
	{
	    // TODO not finished yet...
	    UI::OpenDialog( `opt(`decorated), `HBox(
		`HSpacing(1),
		`VBox(
		    `VSpacing(0.2),
		    `MultiSelectionBox( `id(`services),
			// selection box label
			_("Available &Services"), service_items),
		    `VSpacing(0.2),
		    `PushButton(`id(`ok),`opt(`default, `key_F10),
			OKButtonLabel())
		)));
	    UI::UserInput();
	    UI::CloseDialog();
	}
	else if (ret == `ok)
	{
	    // check service existence
	    if (!SCR::Read (.init.scripts.exists, service))
	    {
		UI::ErrorPopup (sformat(_("Service %1 does not exist."),
		    service));
		// TODO: ask if really use it
		continue;
	    }
	    y2milestone ("service %1 selected", service);
	}
    } while (ret != `ok && ret != `cancel);

    UI::CloseDialog();
    return service;
}

/**
 * popup for entering new file for resource group
 * @return file name; empty string on cancel
 */
global define string GetFile() ``{

    string filename = "";
    UI::OpenDialog( `opt(`decorated), `HBox(
	`HSpacing(1),
	`VBox(
	    `VSpacing(0.2),
	    `HBox (
		// text entry label
		`TextEntry(`id(`file), _("&File name:"), ""),
		`HSpacing (1),
		`VBox (
		    `Label(""),
		    // button label
		    `PushButton (`id (`browse), `opt (`key_F6), _("&Browse"))
		)
	    ),
	    `VSpacing(0.2),
	    `HBox(
		`PushButton(`id(`ok),`opt(`default, `key_F10), OKButtonLabel()),
		`PushButton(`id(`cancel), `opt (`key_F9), CancelButtonLabel())
	    ),
	    `VSpacing(0.2)),
	`HSpacing(1)
    ));

    UI::SetFocus (`id (`file));

    any ret = nil;
    do {
	ret = UI::UserInput();
	filename = UI::QueryWidget(`id(`file), `Value);

	if (ret == `cancel)
	{
	    filename = "";
	}
	else if (ret == `browse)
	{
	    filename = PopupFile ((filename != "")? "/" : filename);
	    UI::ChangeWidget (`id(`file), `Value, filename);
	}
	else if (ret == `ok)
	{
	    // TODO: could it be directory?
	    if (filename != "" && SCR::Read (.target.size, filename) < 0)
	    {
		// error popup
		UI::ErrorPopup (_("Such a file does not exist."));
		continue;
	    }
	    y2milestone ("file %1 selected", filename);
	}
    } while (ret != `ok && ret != `cancel);

    UI::CloseDialog();
    return filename;
}

/**
 * Popup for editing or adding resource group settings
 * @param group map with info of the group
 * @return modified group
 */
global define map ResourceGroupPopup (map group) ``{

y2internal ("current group: %1", group);

    string groupname = group["name"]:"";
    string descr = group["description"]:"";
    string what = (group == $[])? "added": "edited";
    list items = [];
    // map for saving user_defined flags of each resource
    map user_defined = $[];

    term con = `HBox(`VSpacing(26),`HSpacing(1.5), `VBox(
        `HSpacing(60),
	`VSpacing(0.5),
	// textentry label
	`TextEntry (`id(`name), _("Resource &Group"), groupname),
        `VSpacing(0.5),
	// textentry label
	`TextEntry (`id(`descr), _("D&escription"), descr),
        `VSpacing(0.5),
	// frame label
	`Frame(_("Resources"), `HBox(`HSpacing(1), `VBox(
            `VSpacing(0.2),
	    `Table(`id(`resources), `opt (`notify),
		`header(
		    " ",
                    // Header of the table with resources of one group 2/3
                    _("Name"),
                    // Header of the table with resources of one group 3/3
                    _("Type")),
                items
            ),
            `VSpacing(0.2),
	    `HBox(
		// Push button label
		`PushButton(`id(`adds_b), `opt(`key_F3), _("Add &Service")),
                // Push button label
		`PushButton(`id(`addf_b), `opt(`key_F4),_("Add &File")),
		`Left(
                    // Push button label
		    `PushButton(`id(`delete_b),`opt(`key_F5),_("&Delete")))
		),
	    `VSpacing(0.2)),
	    `HSpacing())
	),
        `VSpacing(0.5),
	`HBox(
	    // FIXME what about styleguide? (=OK on the left)
	    `HSpacing(1.5),
	    `Left(
		`PushButton(`id(`cancel),`opt (`key_F9), CancelButtonLabel())),
	    `Right(
		`PushButton(`id(`ok), `opt(`default,`key_F10),OKButtonLabel())),
	    `HSpacing(1.5)
	),
        `VSpacing(0.5)
	),
        `HSpacing(1.5)
    );

    UI::OpenDialog(`opt(`decorated), con);
    items = maplist (`res, group["resources"]:[], ``{
	string name = res["name"]:"";
	user_defined [name] = res["user_defined"]:false;
	if (res["active"]:false)
	    return `item(`id(name), "X", name, res["type"]:"");
	else
	    return `item(`id(name), "", name, res["type"]:"");
    });
    UI::ChangeWidget(`id(`resources), `Items, items);
    UI::SetFocus(`id(`name));

    any ret = nil;
    do
    {
        ret = UI::UserInput();
	selected = UI::QueryWidget(`id(`resources), `CurrentItem);

	if (ret == `resources)
	{
	    items = maplist (`i, items, ``{
		if ((select(i,2,"") != selected))
		    return i;
		if ((select(i,1,"") == "X"))
		    return `item(`id(selected), "", selected, select (i,3,""));
		else
		    return `item(`id(selected), "X", selected, select (i,3,""));
	    });
	    UI::ChangeWidget(`id(`resources), `Items, items);
	    UI::ChangeWidget(`id(`resources), `CurrentItem, selected);
	}
	if (ret == `delete_b)
	{
	    if (!user_defined[selected]:false)
	    {
		// Popup text (user wants to delete predefined resource)
		UI::MessagePopup(_("You cannot delete predefined resource."));
		continue;
	    }
	    // Popup text (confirmation), %1 is name of file or service
	    if (UI::YesNoPopup(sformat(_("Really delete \'%1\' from this group?"),
		selected)))
	    {
		y2milestone ("deleting %1", selected);
		// delete entry from local items
		items = filter (`i, items, ``(select(i,2,"") != selected));
		UI::ChangeWidget(`id(`resources), `Items, items);
	    }
	}
	if (ret == `adds_b)
	{
	    string service = GetService ();
	    if (service != "")
	    {
		y2milestone ("new service %1 for group %2", service, groupname);
		items = add (items, `item(`id(service), "", service,"service"));
		user_defined [service] = true;
		UI::ChangeWidget(`id(`resources), `Items, items);
	    }
	}
	if (ret == `addf_b)
	{
	    string file = GetFile ();
	    if (file != "")
	    {
		y2milestone ("new file %1 for group %2", file, groupname);
		items = add (items, `item(`id(file), "", file, "file"));
		user_defined [file] = true;
		UI::ChangeWidget(`id(`resources), `Items, items);
	    }
	}
	if (ret == `ok)
	{
	    y2milestone ("(temporary) saving resource group %1", groupname);
	    // TODO
	    // ---------- check if all is OK
	    groupname = UI::QueryWidget (`id(`name), `Value);
	    descr = UI::QueryWidget (`id(`descr), `Value);
	    list resources = maplist (`i, items, ``{
		return $[
		    "active":	(select (i,1,"") == "X"),
		    "name":	select (i,2,""),
		    "type":	select (i,3,""),
		    "user_defined": user_defined[select (i,2,"")]:false
		];
	    });
	    // TODO
	    if (what == "added" || true) // check are OK and anything changed
	    {
		if (groupname != group["name"]:groupname)
		{
		    // FIXME workaround for renaming groups
		    group["org_name"]	= group["name"]:"";
		    what		= "added";
		}
		group["what"]		= what;
		group["name"]		= groupname;
		group["description"]	= descr;
		group["resources"]	= resources;
		group["user_modified"]	= true;
		if (what == "added")
		    group["user_defined"] = true;
	    }
	}
	if (ret == `cancel || ret == `back)
	{
	    group = $[];
	}
    } while ( !contains ([`ok, `next, `cancel, `back], ret));

    UI::CloseDialog();

    return group;
}


/* EOF */
}
