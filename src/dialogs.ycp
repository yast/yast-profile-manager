/**
 * File:	include/profile-manager/dialogs.ycp
 * Package:	Configuration of profile-manager
 * Summary:	Dialogs definitions
 * Authors:	Jiri Suchomel <jsuchome@suse.cz>
 *
 * $Id$
 */

{

textdomain "profile-manager";

import "ProfileManager";

include "ui/common_popups.ycp";
include "ui/common_messages.ycp";

include "profile-manager/helps.ycp";
include "profile-manager/routines.ycp";

/**
 * Profile settings dialog
 * @return any Returned value from UserInput() call
 */
global define any ProfileSettingsDialog () ``{

    string edited = ProfileManager::selected_profile;
    string action = ProfileManager::profile_action;
    map profiles = ProfileManager::profiles;
    block func = {};

    // reading the profile settings
    ProfileManager::GetProfile();

    map settings = ProfileManager::profile_settings;

	// Dialog caption label
    string caption = _("Special profile settings");
    term contents = `HBox(`HSpacing(1.5),
        `VBox(
        `VSpacing(1),
		// frame label
        `Frame(_("Special profile settings"), `HBox(`HSpacing(1),
            `VBox(
                `VSpacing(0.2),
                // Text entry label
                `TextEntry(`id(`name),_("Pro&file Name")),
                `VSpacing(0.2),
                `HBox(
                    `HSpacing(0.5),
                    // Text entry label (profile description)
                    `MultiLineEdit(`id(`desc),_("&Description")),
                    `HSpacing(0.5)
                    ),
                `VSpacing(0.2),
                // Text entry label
                `TextEntry(`id(`prestart),_("Pr&e Start Script")),
                `VSpacing(0.2),
                // Text entry label
                `TextEntry(`id(`poststart),_("Po&st Start Script")),
                `VSpacing(0.2),
                // Text entry label
                `TextEntry(`id(`prestop),_("P&re Stop Script")),
                `VSpacing(0.2),
                // Text entry label
                `TextEntry(`id(`poststop),_("Pos&t Stop Script")),
                `VSpacing(0.2),
                `Left(`CheckBox(`id(`secure_ch),
				// checkbox label
                    _("Set file &permitions of all scripts secure (0700)."))),
                `VSpacing(0.2)
            ),
            `HSpacing(1))),
	    `VSpacing(1)),
        `HSpacing(1.5));


    Wizard::RestoreBackButton ();

    Wizard::SetContentsButtons ( caption,
				contents,
                HELPS["profilesettings"]:"",
				CancelButtonLabel (),
				OKButtonLabel () );

    UI::ChangeWidget(`id(`desc), `Value, lookup(settings,"description",""));
    UI::ChangeWidget(`id(`prestart), `Value, lookup(settings,"prestart",""));
    UI::ChangeWidget(`id(`poststart), `Value, lookup(settings,"poststart",""));
    UI::ChangeWidget(`id(`prestop), `Value, lookup(settings,"prestop",""));
    UI::ChangeWidget(`id(`poststop), `Value, lookup(settings,"poststop",""));
    if (action == "edit")
        UI::ChangeWidget(`id(`name), `Value, edited);
    else
        UI::SetFocus(`id(`name));

    any ret = nil;
    while (true)
    {
	ret = UI::UserInput ();
	if (ret == `back)
    {
        break;
    }
    else if (ret == `next)
	{
        boolean secure = UI::QueryWidget(`id(`secure_ch), `Value);
        string selected = UI::QueryWidget(`id(`name), `Value);

        if (!ProfileManager::CheckNameValidity(selected))
        {
			// Popup text (wrong data):
            UI::MessagePopup(_("You have to choose valid name."));
            continue;
        }

        map new_settings = $[];
        new_settings = add (new_settings, "prestart", UI::QueryWidget(`id(`prestart), `Value));
        new_settings = add (new_settings, "poststart", UI::QueryWidget(`id(`poststart), `Value));
        new_settings = add (new_settings, "prestop", UI::QueryWidget(`id(`prestop), `Value));
        new_settings = add (new_settings, "poststop", UI::QueryWidget(`id(`poststop), `Value));

        if (!ProfileManager::CheckFilesValidity(new_settings))
        {
			// Popup text (file paths are wrong):
			UI::MessagePopup(_("You have to choose valid paths to scripts."));
            continue;
        }

        // we don't need to check description
        new_settings = add (new_settings, "name", selected);
        new_settings = add (new_settings, "description", UI::QueryWidget(`id(`desc), `Value));

        if (action == "new")
        {
            if (lookup(profiles, selected, nil) != nil)
            {
				// Popup text:
                UI::MessagePopup(_("Profile with this name already exists."));
                continue;
            }
            ProfileManager::AddProfile(selected);
            func = ``{
                if (!ProfileManager::Wait())
                    // Error popup text
                    UI::ErrorPopup(_("Adding new profile was not succesfull."));
                else
                {
                    ProfileManager::profiles = add (ProfileManager::profiles,
                            selected, "");

                    if (ProfileManager::auto)
                        ProfileManager::active_profile = selected;

                    ProfileManager::profile_settings = new_settings;
                    if (!ProfileManager::SetProfile(selected))
                    {
                        UI::ErrorPopup(
                            // Error popup text
                            _("Writing profile settings was not succesfull."));
                    }
                }
            };
        }
        else if (action == "copy")
        {
            if (lookup(profiles, selected, nil) != nil)
            {
				// Popup text
                UI::MessagePopup(_("Profile with this name already exists."));
                continue;
            }
            ProfileManager::CopyProfile(edited, selected);
               func = ``{
                if (!ProfileManager::Wait())
                    // Error popup text
                    UI::ErrorPopup(_("Copying profile was not succesfull."));
                else
                {
                    ProfileManager::profiles = add (ProfileManager::profiles,
                            selected, "");

                    ProfileManager::profile_settings = new_settings;
                    if (!ProfileManager::SetProfile(selected))
                    {
                        UI::ErrorPopup(
                            // Error popup text
                            _("Writing profile settings was not succesfull."));
                    }
                }
            };
        }
        else if (action == "edit")
        {
            if (selected != edited)
            {

                if (lookup(profiles, selected, nil) != nil)
                {
					// Popup text
                    UI::MessagePopup(_("Profile with this name already exists."));
                    continue;
                }
                if (!ProfileManager::RenameProfile(edited, selected))
                {
                    // Error popup text
                    UI::ErrorPopup(_("Renaming profile was not succesfull."));
                    continue;
                }
            }
            if (ProfileManager::ModifiedSettings(new_settings))
            {
                ProfileManager::profile_settings = new_settings;
                if (!ProfileManager::SetProfile(selected))
                {
                    // Error popup text
                    UI::ErrorPopup(_("Writing profile settings was not succesfull."));
                }
            }
        }
        if (secure)
            ProfileManager::SetFilePermitions();
        if (action != "edit")
        {
            ProgressPopup(func);
        }
	    break;
	}
    };

    return ret;
}

/**
 * Switch dialog
 * @return any Returned value from UserInput() call
 */
global define any SwitchDialog () ``{

    string active = ProfileManager::active_profile;
    string selected = ProfileManager::selected_profile;

    list resources_as_items = ProfileManager::GetResourcesAsItems();

	// Dialog caption label
    string caption = _("Confirm Switch");
    term contents = `HBox(
	`HSpacing(1.5),
	`VBox(
        `VSpacing(1),
        `HBox(
            `HSpacing(1),
            // Label text
            `Label(_("active Profile:")),
            `Right(`Heading(active)),
            `HSpacing(2)
            ),
        `VSpacing(0.2),
        `HBox(
            `HSpacing(1),
            // Label text
            `Label(_("new Profile:")),
            `Right(`Heading(selected)),
            `HSpacing(2)
            ),
        `VSpacing(1),
		// frame label
        `Frame(_("Modified Resources of active Profile"), `HBox(`HSpacing(1),
            `VBox(
                `VSpacing(0.2),
		        `Table(`id(`modified),`opt(`notify),
                    `header(
                            // Header of the table with modified resources 1/4
                            _("save"),
                            // Header of the table with modified resources 2/4
                            _("flags"),
                            // Header of the table with modified resources 3/4
                            _("Resource"),
                            // Header of the table with modified resources 4/4
                            _("type")),
                    []
                    ),
                `VSpacing(0.2),
		        `HBox(
                    // Push button label
		            `PushButton(`id(`save_button), _("&Save all")),
                    // Push button label
		            `PushButton(`id(`drop_button), _("&Drop all")),
                    // Push button label
                    `Right( `PushButton(`id(`changes_button), _("Show c&hanges")))
				    ),
                `VSpacing(0.2)
                ),
            `HSpacing(1)
                )),
        `VSpacing(1)
		),
	`HSpacing(1.5));

    Wizard::RestoreBackButton ();

    Wizard::SetContentsButtons ( caption,
				contents,
	            HELPS["switch"]:"",
				CancelButtonLabel (),
				OKButtonLabel () );

    UI::ChangeWidget(`id(`modified), `Items, resources_as_items);

    if (resources_as_items == [] || resources_as_items == nil)
    {
        UI::ChangeWidget(`id(`modified), `Enabled, false);
        UI::ChangeWidget(`id(`save_button), `Enabled, false);
        UI::ChangeWidget(`id(`drop_button), `Enabled, false);
        UI::ChangeWidget(`id(`changes_button), `Enabled, false);
    }
    else
        UI::ChangeWidget(`id(`modified), `CurrentItem,
            ProfileManager::active_resource);

    any ret = nil;
    while (true)
    {
	    ret = UI::UserInput ();
	    if (ret == `back)
            break;
        else if (ret ==`modified)
        {
            ProfileManager::active_resource =
                UI::QueryWidget(`id(`modified), `CurrentItem);
            ProfileManager::SetSaveFlag();
            UI::ChangeWidget(`id(`modified), `Items,
                    ProfileManager::GetResourcesAsItems());
            UI::ChangeWidget(`id(`modified), `CurrentItem,
                    ProfileManager::active_resource);
            continue;
        }
        else if (ret == `save_button)
	    {
            ProfileManager::SaveSwitchInfo();
            UI::ChangeWidget(`id(`modified), `Items,
                    ProfileManager::GetResourcesAsItems());
            // is this necessary?
            UI::ChangeWidget(`id(`modified), `CurrentItem,
                    ProfileManager::active_resource);
            continue;
        }
        else if (ret == `drop_button)
        {
            ProfileManager::DropSwitchInfo();
            UI::ChangeWidget(`id(`modified), `Items,
                    ProfileManager::GetResourcesAsItems());
            // is this necessary?
            UI::ChangeWidget(`id(`modified), `CurrentItem,
                    ProfileManager::active_resource);
            continue;
        }
        else if (ret == `changes_button)
        {
            ProfileManager::active_resource =
                UI::QueryWidget(`id(`modified), `CurrentItem);
            ShowChangesPopup();
            continue;
        }
        else if (ret == `next)
	    {
            ProfileManager::Switch();
            block func = ``{
                if (!ProfileManager::Wait())
                    // Error popup text
                    UI::ErrorPopup(_("Switching was not succesfull."));
                else
                    ProfileManager::active_profile = selected;
            };
            ProgressPopup(func);
	        break;
	    }
        };

    return ret;
}

/**
 * Popup for adding new profile
 * @return boolean true if user confirms action
 */
global define boolean AddProfilePopup() ``{

    map profiles = ProfileManager::profiles;

    UI::OpenDialog(`opt(`decorated), `HBox(`HSpacing(1.5),
        `VBox(
//            `HSpacing(15),
            `VSpacing(1),
			// Popup text, part 1/3
	        `Left(`Label(_("Add a new profile based"))),
            `VSpacing(1),
            `RadioButtonGroup(`id(`rb),
	            `VBox(
					// Popup text, part 2/3
			        `Left(`RadioButton(`id(`new), _("on the c&urrent system configuration"))),
                    `VSpacing(0.2),
                    `HBox(
                    `HSpacing(2),
					// Checkbox label, part 1/2
                 `CheckBox(`id(`auto), _("&Make the added profile the new active profile."))),
                    `HBox(
                    `HSpacing(4.5),
					// Checkbox label, part 2/2
                 `Label(_("This does not save anything to the old active
profile nor does it start or stop services."))),
                   `VSpacing(1),
					// Popup text, part 3/3
                    `Left(`RadioButton(`id(`copy), _("on an &existing profile:")))
                    )),
            `SelectionBox(`id(`profiles),
                 "", maplist(`name, `desc, profiles, ``{ return name; })),
            `VSpacing(1),
	        `HBox(
	            `HSpacing(1),
	            `Left(`PushButton(`id(`cancel), CancelButtonLabel())),
	            `Right(`PushButton(`id(`ok), `opt(`default), OKButtonLabel())),
	            `HSpacing(1)
	            ),
            `VSpacing(1)),
        `HSpacing(1.5)
        ));

    UI::ChangeWidget(`id(`rb), `CurrentButton, `new);

    any ret = nil;
    while (true)
    {
        ret = UI::UserInput();
        if (ret == `ok)
        {
            if (UI::QueryWidget(`id(`rb), `CurrentButton) == `copy)
            {
                string selected = UI::QueryWidget(`id(`profiles), `CurrentItem);
                if (selected == nil)
                {
					// Popup text
                    UI::MessagePopup(_("Please select a profile which you want to copy."));
                    continue;
                }
                ProfileManager::profile_action = "copy";
                ProfileManager::selected_profile = selected;
            }
            else
            {
                ProfileManager::profile_action = "new";
                ProfileManager::selected_profile = ProfileManager::active_profile;
                ProfileManager::auto = UI::QueryWidget(`id(`auto), `Value);
            }
            break;
        }
        if (ret == `cancel)
            break;
    }

    UI::CloseDialog();

	if (ret == `ok)
		return true;
	else
		return false;
}

/**
 * Popup for showing progress informations
 * @param function actions to execute after finish of agent's thread
 * generating progress output
 * @return boolean true on success
 */
global define boolean ProgressPopup( block function) ``{

    boolean close_popups = ProfileManager::close_popups;

    UI::OpenDialog(`opt(`decorated), `HBox(`HSpacing(1.5),
        `VBox(
            `VSpacing(1),
			// LogView label:
            `LogView(`id(`progress),_("Progress informations"), 10, 0),
            `VSpacing(1),
/*            `ProgressBar(`id(`pb), "", 100, 0),
            `VSpacing(1),*/
			// checkbox label:
            `CheckBox(`id(`close_ch),_("Close progress popups &automatically (reenable it in SCPM Setup)"),close_popups),
            `VSpacing(1),
	        `HBox(
                // Push button label
	            `Right(`PushButton(`id(`close), `opt(`default), _("&Close"))),
	            `HSpacing(1)
	            ),
            `VSpacing(1)),
        `HSpacing(1.5)
        ));

    UI::ChangeWidget(`id(`close), `Enabled, false);
    UI::ChangeWidget(`id(`close_ch), `Enabled, false);

    // evaluating function

    string progresstext = "";
    ProfileManager::end_of_progress = false;
    ProfileManager::start_of_progress = ProfileManager::progress_size;
    do
    {
        UI::BusyCursor();
        sleep(1);
        progresstext = ProfileManager::GetProgressText();
        if (progresstext != "")
            UI::ChangeWidget(`id(`progress), `LastLine, progresstext);
    }
    while (!ProfileManager::end_of_progress);

    // what has to be done after finishing background process:
    eval ( function );

    /* disabled for now
    integer steps = 0;
    while (steps<100)
    {
        steps = steps + 1;
        UI::ChangeWidget(`id(`pb), `Value, steps);
    }
    */

    UI::NormalCursor();
    if (!close_popups)
    {
        UI::ChangeWidget(`id(`close), `Enabled, true);
        any ret = UI::UserInput();
    }
    UI::CloseDialog();
    return true;
}

/**
 * Introduction popup
 * @return boolean true on success
 */
global define boolean IntroductionPopup() ``{

	// Inroduction text, part 1/2
    string intro_text = _("<p>SCPM is currently disabled.<br>
To enable it use the Options button<br></p>") +

	// Inroduction text, part 2/2
 _("<p>If you are new to SCPM then please read at least the help texts. Better read the introduction in the info pages. You should know what we mean with 'active profile' or 'current configuration' before you start using SCPM.</p>");

    UI::OpenDialog(`opt(`decorated), `HBox(`HSpacing(1.5),
        `VSpacing(15),
        `VBox(
            `HSpacing(40),
            `VSpacing(1),
            `RichText(intro_text),
            `VSpacing(1),
	        `HBox(
	            `HSpacing(1),
                // Push button label (read the intrduction before starting)

	            `PushButton(`id(`intro),`opt(`default), _("&Show introduction")),
                // Push button label (start without reading the intrduction)
	            `PushButton(`id(`cont), _("Let's &go")),
	            `HSpacing(1)
	            ),
            `VSpacing(1)),
        `HSpacing(1.5)
        ));

    any ret = nil;
    ret = UI::UserInput();
    UI::CloseDialog();

    if (ret == `intro)
    {
        ProfileManager::RunIntro();
    }

    ProfileManager::first_time = false;
    return true;
}

/**
 * Popup which shows changes of selected resource
 * @return boolean true on success
 */
global define boolean ShowChangesPopup() ``{

    string changes = ProfileManager::ShowChanges();

    UI::OpenDialog(`opt(`decorated), `HBox(`HSpacing(1.5),
        `VSpacing(15),
        `VBox(
            `HSpacing(50),
            `VSpacing(1),
			// Popup text
            `Label(_("Changes of the resource")),
            `Label(ProfileManager::active_resource_name),
            `VSpacing(1),
            `RichText(changes),
            `VSpacing(1),
            `PushButton(`id(`ok), `opt(`default), OKButtonLabel()),
            `VSpacing(1)),
        `HSpacing(1.5)
        ));

    any ret = UI::UserInput();
    UI::CloseDialog();

    return true;
}

/* not impl.yet
global define string CopyResourcePopup() ``{

    return "new";
}
*/

/* EOF */
}
