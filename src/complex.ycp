/**
 * File:	include/profile-manager/complex.ycp
 * Package:	Configuration of profile-manager
 * Summary:	Dialogs definitions
 * Authors:	Jiri Suchomel <jsuchome@suse.cz>
 *
 * $Id$
 */

{

textdomain "profile-manager";

import "Wizard";

import "ProfileManager";

import "Popup";
import "Label";

include "profile-manager/helps.ycp";
include "profile-manager/routines.ycp";


/**
 * Read settings dialog
 * @return `abort if aborted and `next otherwise
 */
global define symbol ReadDialog() ``{
    Wizard::RestoreHelp(HELPS["read"]:"");
    ProfileManager::AbortFunction = ``{ return PollAbort();};
    boolean ret = ProfileManager::Read();
    return ret ? `next : `abort;
}

/**
 * Write settings dialog
 * @return `abort if aborted and `next otherwise
 */
global define symbol WriteDialog() ``{
    Wizard::RestoreHelp(HELPS["write"]:"");
    boolean ret = ProfileManager::Write();
    return ret ? `next : `abort;
}

/**
 * Main dialog
 * @return any Returned value from UserInput() call
 */
global define any MainDialog () ``{
	// Caption of the dialog:
    string caption = _("System configuration profile management");

    map profiles = ProfileManager::profiles;
    string active = ProfileManager::active_profile;
    boolean enabled = ProfileManager::enabled;

    // State label text (continues with the name of the resource set):
    string state_label = (enabled)? _("SCPM is enabled with Resource Set \"")+ProfileManager::current_resources+"\"." :
    // Alternative state label text:
    _("SCPM is disabled.");

    boolean use_rg = ProfileManager::use_rg;
    if (use_rg)
	state_label = (enabled) ? _("SCPM is enabled."):_("SCPM is disabled.");

    string selected = "";

    term contents = `HBox(
	`HSpacing(1.5),
	`VBox(
        `VSpacing(1),
	// frame label:
        `Frame(_("Profile management"), `HBox(`HSpacing(1),
            `VBox(
                `VSpacing(0.2),
		    `Table(`id(`profiles), `opt (`notify),
                    `header(
                        // Header of the table with the aviable profiles 1/3
                        _("active"),
                        // Header of the table with the aviable profiles 2/3
                        _("Name"),
                        // Header of the table with the aviable profiles 3/3
                        _("Description")),
                    []
                    ),
                `VSpacing(0.2),
		`HBox(
                    `Left(
                    `PushButton(`id(`switch_button), `opt(`key_F6),
                        // Push button label
                        _("&Switch to..."))),
                    // Push button label
		    `PushButton(`id(`add_button), `opt(`key_F3), _("&Add")),
                    // Push button label
		    `PushButton(`id(`edit_button), `opt(`key_F4),_("&Edit")),
                    // Push button label
		    `PushButton(`id(`delete_button), `opt(`key_F5),_("&Delete"))
		    ),
		`VSpacing(0.2)
                ),
            `HSpacing(1)
        )),
        `VSpacing(1),
	// frame label:
	`Frame(_("General Setup"), `VBox(`VSpacing(0.2),
        `HBox(
	    `HSpacing(1),
	    `Label (state_label),
	    `Right(`PushButton(`id(`options_button), `opt(`key_F7),
		// Push button label
                _("O&ptions"))),
            `HSpacing(1)
	),
        `VSpacing(0.2))),
        `VSpacing(1)
	),
	`HSpacing(1.5)
    );

    Wizard::SetContentsButtons ( caption,
				contents,
                HELPS["main"]:"",
                Label::BackButton (),
				Label::CloseButton () );

    Wizard::ReplaceBackButton (`PushButton (`id(`intro), `opt(`key_F2),
        // pushbutton
        _("&Introduction to SCPM")));
    Wizard::ReplaceAbortButton (`Empty());

    UI::ChangeWidget(`id(`profiles), `Items,
	ProfileManager::GetProfilesAsItems());

    if (enabled) {
        UI::ChangeWidget(`id(`profiles), `CurrentItem, ProfileManager::active_profile);
        UI::SetFocus(`id(`profiles));
    }

    UI::ChangeWidget(`id(`profiles), `Enabled, enabled);
    UI::ChangeWidget(`id(`add_button), `Enabled, enabled);
    UI::ChangeWidget(`id(`edit_button), `Enabled, enabled);
    UI::ChangeWidget(`id(`delete_button), `Enabled, enabled);
    UI::ChangeWidget(`id(`switch_button), `Enabled, enabled);

    if (ProfileManager::first_time && !enabled)
        IntroductionPopup();

    any ret = nil;
    while (true)
    {
	ret = UI::UserInput ();
	if (ret == `delete_button)
	{
	    selected = UI::QueryWidget(`id(`profiles), `CurrentItem);
	    if (selected == active)
		// Popup text (user wants to delete active profile):
		Popup::Message(_("You cannot delete the active profile."));
	    else
	    {
		// Popup text (confirmation)
		if (Popup::YesNo(sformat(_("Really delete profile %1?"), selected)))
		{
		    if (!ProfileManager::DeleteProfile(selected))
		    {
			// Error popup text: %1 is additional error message
			Popup::Error(sformat(
			    _("Deleting the profile was not successful:
%1
"),
			    ProfileManager::scpm_error));
		    }
		    UI::ChangeWidget(`id(`profiles), `Items,
			ProfileManager::GetProfilesAsItems());
		    UI::ChangeWidget(`id(`profiles), `CurrentItem,
                        ProfileManager::active_profile);
		}
	    }
	    continue;
	}
	else if (ret == `add_button)
	{
	    if (AddProfilePopup())
		return `edit_button;
	    else continue;
	}
	else if (ret == `edit_button || ret == `profiles)
	{
	    ret = `edit_button;
	    ProfileManager::selected_profile = UI::QueryWidget(`id(`profiles), `CurrentItem);
	    ProfileManager::profile_action = "edit";
	    break;
	}
	else if (ret == `switch_button)
	{
	    selected = UI::QueryWidget(`id(`profiles), `CurrentItem);
	    ProfileManager::selected_profile = selected;
	    ProfileManager::PrepareSwitch();
	    ProgressPopup("",0,100);

	    if (!ProfileManager::Wait())
	    {
		// Error popup text, %1 is additional translated error message
		Popup::Error(sformat(_("Switching to another profile is not possible:\n%1"), ProfileManager::scpm_error));
		continue;
	    }
	    if (!ProfileManager::ReadSwitchInfo())
	    {
		// Error popup text
		Popup::Error(_("Switching to another profile is not possible."));
		continue;
	    }

	    break;
	}
	else if (ret == `intro) // help button
	{
	    IntroductionTextPopup();
	    continue;
	}
	else if (ret == `next || ret == `options_button || ret == `cancel)
	    break;
    };

    return ret;
}


/**
 * Options dialog
 * @return any Returned value from UserInput() call
 */
global define any OptionsDialog () ``{

    string separator = "-----";
    string selected = "";

    ProfileManager::ReadResourceSets();

    list resource_sets = union( union (ProfileManager::resource_sets_predefined, [ separator ]), ProfileManager::resource_sets_individual);
    boolean close_popups = ProfileManager::close_popups;

    list switch_modes = ["normal", "skip", "force"];
    list boot_modes = ["backup", "skip", "force"];
    // FIXME how should the module behave according to this values?

    boolean use_rg = ProfileManager::use_rg;
    // -------------------------

    // Dialog caption label:
    string caption = _("SCPM Options");
    term contents = `HBox(`HSpacing(1.5),
        `VBox(
        `VSpacing(1),
	// frame label:
        `Frame(_("Enable SCPM"), `VBox(
	    `VSpacing(0.5),
            `RadioButtonGroup(`id(`rb),
	    `HBox(
		`HCenter(`RadioButton(`id(`ena), `opt(`notify),
		    // Push button label (state of SCPM)
                    _("&Enabled") )),
                `HCenter(`RadioButton(`id(`dis), `opt(`notify),
		    // Push button label (state of SCPM)
                    _("&Disabled") ))
            )),
	    `VSpacing(0.5)
        )),
        `VSpacing(1),
	// frame label
	`Frame(_("Resource Sets"), `VBox(
	    `VSpacing(0.2),
            `HBox(
                `HSpacing(1),
                `SelectionBox(`id(`resources),
		    // selection box label:
                    _("Choose a &resource set:"), resource_sets),
                `HSpacing(1)
            ),
            `VSpacing(0.5)
        )),
        `VSpacing(1),
	// frame label:
	`Frame(_("Other settings"), `VBox(
            `VSpacing(0.5),
            `HBox(
                `HSpacing(1),
		`Left(`CheckBox(`id(`close_popups_ch),
		    // checkbox label
                    _("Close progress pop-ups &automaticaly"), close_popups))
            ),
            `VSpacing(0.5)
        )),
	`VSpacing(1)),
        `HSpacing(1.5));

    if (use_rg)
	contents = `HBox(`HSpacing(1.5),
        `VBox(
        `VSpacing(1),
	// frame label:
        `Frame(_("Enable SCPM"), `VBox(
	    `VSpacing(0.5),
            `RadioButtonGroup(`id(`rb),
	    `HBox(
		`HCenter(`RadioButton(`id(`ena), `opt(`notify),
		    // Push button label (state of SCPM)
                    _("&Enabled") )),
                `HCenter(`RadioButton(`id(`dis), `opt(`notify),
		    // Push button label (state of SCPM)
                    _("&Disabled") ))
            )),
	    `VSpacing(0.5)
        )),
	`VSpacing(1),
	// frame label:
	`Frame(_("Settings"), `HBox(
	    `HSpacing(1),
	    `VBox(
		`VSpacing(0.5),
		`Left(`CheckBox(`id(`close_popups_ch),
		    // checkbox label
                    _("Close progress pop-ups &automaticaly"), close_popups)),
		`VSpacing(0.5),
		`Left(`CheckBox(`id("verbose"),
		    // checkbox label
                    _("&Verbose messages"), false)),
		`VSpacing(3),
		`HBox(
		    `HSpacing(),
		    `Left(
		    // combobox label
		     `ComboBox(`id("switch_mode"), _("S&witch mode"),
			switch_modes)),
		    `HSpacing(),
		    `Left(
		    // combobox label
		    `ComboBox(`id("boot_mode"), _("Boo&t mode"), boot_modes)),
		    `HSpacing()
		),
		`VSpacing()
	    )
        )),
        `VSpacing(1),
	`Bottom(
	    // button label
	    `Right (`PushButton(`id(`resources), _("Configure &Resources")))
	),
	`VSpacing(1)
	),
        `HSpacing(1.5));


    Wizard::RestoreBackButton ();

    Wizard::SetContentsButtons ( caption, contents, HELPS["options"]:"",
				Label::BackButton (), Label::OKButton () );

    if (ProfileManager::enabled || ProfileManager::tmp_enabled)
    {
        UI::ChangeWidget(`id(`rb), `CurrentButton, `ena);
    }
    else
    {
        UI::ChangeWidget(`id(`rb), `CurrentButton, `dis);
	UI::ChangeWidget(`id(`resources), `Enabled, false);
    }

    if (size(ProfileManager::current_resources)>0)
        UI::ChangeWidget(`id(`resources), `CurrentItem,
            ProfileManager::current_resources);

    // set the initial values of comboboxes
    if (use_rg)
    {
	foreach (`key, `value, ProfileManager::scpm_conf, ``{
	    UI::ChangeWidget (`id(key), `Value, value);
	});
    }

    any ret = nil;
    while (true)
    {

    ret = UI::UserInput ();
    if (ret == `dis)
    {
	ProfileManager::tmp_enabled = false;
        UI::ChangeWidget(`id(`resources), `Enabled, false);
        continue;
    }
    else if (ret == `ena)
    {
	ProfileManager::tmp_enabled = true;
        UI::ChangeWidget(`id(`resources), `Enabled, true);
        continue;
    }
    else if (ret == `resources && use_rg)
    {
	// for resource groups there is another dialog defined
	break;
    }
    else if (ret == `next)
    {
        close_popups = UI::QueryWidget(`id(`close_popups_ch), `Value);

        if (UI::QueryWidget(`id(`rb), `CurrentButton) == `ena) {

	    if (use_rg)
		selected = ProfileManager::current_resources;
	    else
		selected = UI::QueryWidget(`id(`resources), `CurrentItem);
            if (selected == separator || selected == nil)
            {
		// Popup label:
                Popup::Message(_("Choose a resource set first."));
                continue;
            }

            if (!ProfileManager::enabled)
            {
                ProfileManager::enabled = true;

		if (!ProfileManager::initialized)
                {
                    ProfileManager::current_resources = selected;
                    ProfileManager::WriteResources(selected);

                    ProfileManager::initialized = true;
                    ProfileManager::WriteStatusFirst();
                    ProgressPopup("",0,100);
                    if (!ProfileManager::Wait())
                    {
                        // Error popup text, %1 is additional error message
                        Popup::Error(sformat (_("Enabling SCPM was not successful:
%1
"), ProfileManager::scpm_error));
                        ProfileManager::enabled = false;
                    }
                    else
                    {
                        ProfileManager::ReadProfiles();
                        ProfileManager::ReadActiveProfile();
			ProfileManager::ReadProfilesDescriptions();
                    }
                }
                else
                {
                    ProfileManager::current_resources = selected;
                    ProfileManager::WriteResources(selected);

                    if (!ProfileManager::WriteSCPMStatus())
                    {
                        Popup::Error(sformat(
                            // Error popup text, %1 is additional error text
                            _("Enabling SCPM was not successful:
%1
"),
                            ProfileManager::scpm_error));
                        ProfileManager::enabled = false;
                        break;
                    }
                    ProfileManager::ReadProfiles(); // on some other place?
	            ProfileManager::ReadActiveProfile();
		    ProfileManager::ReadProfilesDescriptions();
                }
            }
	    else if (ProfileManager::current_resources != selected)
            {
		// Popup label (confirmation)
		if (Popup::YesNo(_("Changing the resource set may drop some of your configuration settings. Proceed?")))
		{
		    ProfileManager::current_resources = selected;
		    // maybe WriteResources should be run every time
		    ProfileManager::WriteResources(selected);
		    ProfileManager::RebuildDB();
		}
		else continue;
            }
        }
        else
        {
            if (ProfileManager::enabled)
            {
                ProfileManager::enabled = false;
                ProfileManager::current_resources = "";
                if (!ProfileManager::WriteSCPMStatus())
                {
                    Popup::Error(sformat(
                        // Error popup text, %1 is additional error text
                        _("Disabling SCPM was not successful:
%1
"),
                        ProfileManager::scpm_error));
                    ProfileManager::enabled = true;
                    break;
                }
		ProfileManager::profiles = $[];
	    }
        }
	ProfileManager::close_popups = close_popups;

        y2debug("enabled=%1",ProfileManager::enabled);
        y2debug("close_popups=%1",ProfileManager::close_popups);
        y2debug("current_resources=%1",ProfileManager::current_resources);

        break;
    }
    else if (ret == `back || ret == `cancel) break;

    else continue;
    };

    if (ret == `next)
    {
	// moving to other dialog (OK or resources) -> save config values
	foreach (`key, `value, ProfileManager::scpm_conf, ``{
	    ProfileManager::scpm_conf[key] = UI::QueryWidget (`id(key), `Value);
	});
    }
    return ret;
}


/* EOF */
}
