/**
 * File:	include/profile-manager/complex.ycp
 * Package:	Configuration of profile-manager
 * Summary:	Dialogs definitions
 * Authors:	Jiri Suchomel <jsuchome@suse.cz>
 *
 * $Id$
 */

{

textdomain "profile-manager";

import "Wizard";

import "ProfileManager";

include "ui/common_popups.ycp";
include "ui/common_messages.ycp";

include "profile-manager/helps.ycp";
include "profile-manager/routines.ycp";


/**
 * Read settings dialog
 * @return `abort if aborted and `next otherwise
 */
global define symbol ReadDialog() ``{
    Wizard::RestoreHelp(HELPS["read"]:"");
    ProfileManager::AbortFunction = ``{ return PollAbort();};
    boolean ret = ProfileManager::Read();
    return ret ? `next : `abort;
}

/**
 * Write settings dialog
 * @return `abort if aborted and `next otherwise
 */
global define symbol WriteDialog() ``{
    Wizard::RestoreHelp(HELPS["write"]:"");
    boolean ret = ProfileManager::Write();
    return ret ? `next : `abort;
}

/**
 * Main dialog
 * @return any Returned value from UserInput() call
 */
global define any MainDialog () ``{
	// Caption of the dialog:
    string caption = _("System configuration profile management");

	map profiles = ProfileManager::profiles;
    string active = ProfileManager::active_profile;
    boolean enabled = ProfileManager::enabled;

    // State label text (continues with the name of the resource set):
	string state_label = (enabled)? _("SCPM is enabled with Resource Set \"")+ProfileManager::current_resources+"\"." :
    // Alternative state label text:
    _("SCPM is disabled.");
    string selected = "";

    term contents = `HBox(
	`HSpacing(1.5),
	`VBox(
        `VSpacing(1),
		// frame label:
        `Frame(_("Profile management"), `HBox(`HSpacing(1),
            `VBox(
                `VSpacing(0.2),
		        `Table(`id(`profiles),
                    `header(
                            // Header of the table with the aviable profiles 1/3
                            _("active"),
                            // Header of the table with the aviable profiles 2/3
                            _("Name"),
                            // Header of the table with the aviable profiles 3/3
                            _("Description")),
                    []
                    ),
                `VSpacing(0.2),
		        `HBox(
                    `Left(
                        // Push button label
                        `PushButton(`id(`switch_button), _("&Switch to..."))),
                    // Push button label
		            `PushButton(`id(`add_button), _("&Add")),
                    // Push button label
		            `PushButton(`id(`edit_button), _("&Edit")),
                    // Push button label
		            `PushButton(`id(`delete_button), _("&Delete"))
				    ),
                `VSpacing(0.2)
                ),
            `HSpacing(1)
                )),
        `VSpacing(1),
		// frame label:
		`Frame(_("General Setup"), `VBox(`VSpacing(0.2),
            `HBox(
                `HSpacing(1),
			    `Label (state_label),
                // Push button label
		        `Right(`PushButton(`id(`options_button), _("O&ptions"))),
                `HSpacing(1)
                ),
            `VSpacing(0.2))),
        `VSpacing(1)
		),
	`HSpacing(1.5));


    Wizard::SetContentsButtons ( caption,
				contents,
                HELPS["main"]:"",
                BackButtonLabel (),
				CloseButtonLabel () );

    Wizard::ReplaceBackButton (`HBox());
    Wizard::ReplaceAbortButton (`HBox());

    UI::ChangeWidget(`id(`profiles), `Items, ProfileManager::GetProfilesAsItems());

    if (enabled) {
        UI::ChangeWidget(`id(`profiles), `CurrentItem, ProfileManager::active_profile);
        UI::SetFocus(`id(`profiles));
    }

    UI::ChangeWidget(`id(`profiles), `Enabled, enabled);
    UI::ChangeWidget(`id(`add_button), `Enabled, enabled);
    UI::ChangeWidget(`id(`edit_button), `Enabled, enabled);
    UI::ChangeWidget(`id(`delete_button), `Enabled, enabled);
    UI::ChangeWidget(`id(`switch_button), `Enabled, enabled);

    if (ProfileManager::first_time && !enabled)
        IntroductionPopup();

    any ret = nil;
    while (true)
    {
	ret = UI::UserInput ();
	if (ret == `delete_button)
	{
        selected = UI::QueryWidget(`id(`profiles), `CurrentItem);
        if (selected == active)
			// Popup text (user wants to delete active profile):
            UI::MessagePopup(_("You cannot delete the active profile."));
        else
        {
			// Popup text (confirmation)
            if (UI::YesNoPopup(sformat(_("Really delete profile %1?"), selected)))
            {
                if (!ProfileManager::DeleteProfile(selected))
					// Error popup text
                    UI::ErrorPopup(_("Deleting the profile was not succesful."));
                UI::ChangeWidget(`id(`profiles), `Items,
                        ProfileManager::GetProfilesAsItems());
                UI::ChangeWidget(`id(`profiles), `CurrentItem,
                        ProfileManager::active_profile);
            }
        }
		continue;
	}
    else if (ret == `add_button)
	{
		if (AddProfilePopup())
			return `edit_button;
		else continue;
	}
    else if (ret == `edit_button)
	{
        ProfileManager::selected_profile = UI::QueryWidget(`id(`profiles), `CurrentItem);
        ProfileManager::profile_action = "edit";
        break;
	}
    else if (ret == `switch_button)
    {
        selected = UI::QueryWidget(`id(`profiles), `CurrentItem);
        /*
        if (selected == active) {
			// Popup text:
            UI::MessagePopup(_("It does not make a sense to switch to the active profile."));
            continue;
        }
        else {*/
        ProfileManager::selected_profile = selected;

        ProfileManager::PrepareSwitch();

        ProgressPopup();

        if (!ProfileManager::Wait())
        {
            // Error popup text
            UI::ErrorPopup(_("Switching to another profile is not possible."));
            continue;
        }
        if (!ProfileManager::ReadSwitchInfo())
        {
            // Error popup text
            UI::ErrorPopup(_("Switching to another profile is not possible."));
            continue;
        }

        break;
    }
    else if (ret == `next || ret ==`back || ret == `options_button)
	    break;

    };

    return ret;
}


/**
 * Options dialog
 * @return any Returned value from UserInput() call
 */
global define any OptionsDialog () ``{

    string separator = "-----";
    string selected = "";

    ProfileManager::ReadResourceSets();

    list resource_sets = union( union (ProfileManager::resource_sets_predefined, [ separator ]), ProfileManager::resource_sets_individual);
    boolean close_popups = ProfileManager::close_popups;

	// Dialog caption label:
    string caption = _("SCPM Options");
    term contents = `HBox(`HSpacing(1.5),
        `VBox(
        `VSpacing(1),
		// frame label:
        `Frame(_("Enable SCPM"), `VBox(
            `VSpacing(0.5),
                `RadioButtonGroup(`id(`rb),
		            `HBox(
                    // Push button label (state of SCPM)
				    `HCenter(`RadioButton(`id(`ena), _("&Enabled") )),
                    // Push button label (state of SCPM)
                    `HCenter(`RadioButton(`id(`dis), _("&Disabled") ))
                    )
				 ),
		    `VSpacing(0.5)
            )),
        `VSpacing(1),
		// frame label
		`Frame(_("Resource Sets"), `VBox(
            `VSpacing(0.2),
            `HBox(
                `HSpacing(1),
                `SelectionBox(`id(`resources),
				    // selection box label:
                    _("Choose a &resource set:"), resource_sets),
/*                `HSpacing(1),
                `VBox(
                `PushButton(`id(`cp_button), _("Co&py")),
                `PushButton(`id(`ed_button), _("Ed&it")),
                `PushButton(`id(`del_button), _("Dele&te"))
                ),*/
                `HSpacing(1)
                ),
            `VSpacing(0.5)
            )),
        `VSpacing(1),
		// frame label:
		`Frame(_("Other settings"), `VBox(
            `VSpacing(0.5),
            `HBox(
                `HSpacing(1),
		        `Left(`CheckBox(`id(`close_popups_ch),
				    // checkbox label
                    _("Close progress pop-ups &automaticaly"), close_popups))
                ),
            `VSpacing(0.5)
            )),
		`VSpacing(1)),
        `HSpacing(1.5));

    Wizard::RestoreBackButton ();

    Wizard::SetContentsButtons ( caption,
				contents,
	            HELPS["options"]:"",
				CancelButtonLabel (),
				OKButtonLabel () );

    if (ProfileManager::enabled)
    {
        UI::ChangeWidget(`id(`rb), `CurrentButton, `ena);
    }
    else
        UI::ChangeWidget(`id(`rb), `CurrentButton, `dis);

    if (size(ProfileManager::current_resources)>0)
        UI::ChangeWidget(`id(`resources), `CurrentItem,
            ProfileManager::current_resources);

    any ret = nil;
    while (true)
    {
	ret = UI::UserInput ();
    if (ret == `rb)
    {
        continue;
    }
    else if (ret == `cp_button)
    {
/*        // check same names!!! -> two lists!
        selected = UI::QueryWidget(`id(`resources), `CurrentItem);
        if (selected == separator)
        {
            // Popup label:
            UI::MessagePopup(_("You have to choose valid resource set."));
            continue;
        }
        string newset = CopyResourcePopup();
        if (newset != "")
            ProfileManager::CopyResourceSet(selected, newset); */
        continue;
    }
    else if (ret == `ed_button)
    {
        continue;
    }
    else if (ret == `del_button)
    {
/*        selected = UI::QueryWidget(`id(`resources), `CurrentItem);
        if (selected == separator ||
            contains(ProfileManager::resource_sets_predefined,selected))
        {
            // Popup label:
            UI::MessagePopup(_("You can delete only individual resource set."));
            continue;
        }

        if (UI::YesNoPopup(sformat(
            _("Do you really want to delete resource set %1?"), selected)))
            ProfileManager::DeleteResourceSet(selected); */
        continue;
    }
    else if (ret == `next)
    {
        close_popups = UI::QueryWidget(`id(`close_popups_ch), `Value);

        if (UI::QueryWidget(`id(`rb), `CurrentButton) == `ena) {

            selected = UI::QueryWidget(`id(`resources), `CurrentItem);
            if (selected == separator || selected == nil)
            {
				// Popup label:
                UI::MessagePopup(_("Choose a resource set first."));
                continue;
            }

            if (!ProfileManager::enabled)
            {
                ProfileManager::enabled = true;

				if (!ProfileManager::initialized)
                {
                    ProfileManager::initialized = true;
                    ProfileManager::WriteStatusFirst();
                    ProgressPopup();
                    if (!ProfileManager::Wait())
                    {
                        // Error popup text
                        UI::ErrorPopup(_("Enabling SCPM was not succesful."));
                        ProfileManager::enabled = false;
                        //    continue;
                    }
                    else
                    {
                        ProfileManager::current_resources = selected;
                        ProfileManager::WriteResources(selected);

                        ProfileManager::ReadProfiles();
                        ProfileManager::ReadActiveProfile();
				        ProfileManager::ReadProfilesDescriptions();
                    }
                }
                else
                {
                    if (!ProfileManager::WriteSCPMStatus())
                    {
                        // Error popup text
                        UI::ErrorPopup(_("Enabling SCPM was not succesful."));
                        ProfileManager::enabled = false;
                        break;
                    }

                    ProfileManager::current_resources = selected;
                    ProfileManager::WriteResources(selected);

                    ProfileManager::ReadProfiles(); // on some other place!
	                ProfileManager::ReadActiveProfile();
		            ProfileManager::ReadProfilesDescriptions();
                }
            }

			else if (ProfileManager::current_resources != selected)
            {
				// Popup label (confirmation)
				if (UI::YesNoPopup(_("Changing the resource set may drop some of your configuration settings. Proceed?")))
				{
					ProfileManager::current_resources = selected;
					// maybe WriteResources should be run every time
					ProfileManager::WriteResources(selected);
					ProfileManager::RebuildDB();
                    /*
                    ProgressPopup();*/
				}
				else continue;
            }
        }
        else
        {
            if (ProfileManager::enabled)
            {
                ProfileManager::enabled = false;
                ProfileManager::current_resources = "";
                if (!ProfileManager::WriteSCPMStatus())
                {
                    // Error popup text
                    UI::ErrorPopup(_("Disabling SCPM was not succesful."));
                    ProfileManager::enabled = true;
                    break;
                }
				ProfileManager::profiles = $[];
         }
        }
		ProfileManager::close_popups = close_popups;

        y2debug("enabled=%1",ProfileManager::enabled);
        y2debug("close_popups=%1",ProfileManager::close_popups);
        y2debug("current_resources=%1",ProfileManager::current_resources);

	    break;
	}
    else if (ret == `back) break;

    else {
        y2error("Undefined return value");
        continue;
    }
    };

    return ret;
}


/* EOF */
}
