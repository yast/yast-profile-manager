/**
 * File:	include/profile-manager/complex.ycp
 * Package:	Configuration of profile-manager
 * Summary:	Dialogs definitions
 * Authors:	Jiri Suchomel <jsuchome@suse.cz>
 *
 * $Id$
 */

{

textdomain "profile-manager";

import "Label";
import "Popup";
import "ProfileManager";
import "Wizard";

include "profile-manager/helps.ycp";
include "profile-manager/dialogs.ycp";


/**
 * Read settings dialog
 * @return `abort if aborted and `next otherwise
 */
define symbol ReadDialog() ``{
    Wizard::RestoreHelp(HELPS["read"]:"");
    Wizard::DisableAbortButton ();
    boolean ret = ProfileManager::Read();
    Wizard::EnableAbortButton ();
    return ret ? `next : `abort;
}

/**
 * Write settings dialog
 * @return `abort if aborted and `next otherwise
 */
define symbol WriteDialog() ``{
    Wizard::RestoreHelp(HELPS["write"]:"");
    Wizard::DisableAbortButton ();
    boolean ret = ProfileManager::Write();
    return ret ? `next : `abort;
}


/**
 * Main dialog for scpm configuration
 */
define any MainDialog () {

    // Dialog caption label:
    string caption = _("SCPM Configuration");

    map conf	= ProfileManager::scpm_conf;

    map<string,map> resource_groups	= ProfileManager::GetResourceGroups();
    boolean users_allowed	= ProfileManager::users_allowed;

    term contents = `HBox (`HSpacing(3), `VBox (
        `VSpacing(1),
	// frame label:
        `Frame(_("Status"), `HBox (`HSpacing (0.5),`VBox(
	    `VSpacing(0.5),
            `RadioButtonGroup(`id(`rb_enabled),
	    `VBox(
		`Left (`RadioButton(`id(`ena), `opt(`notify),
		    // Push button label (state of SCPM)
                    _("&Enabled") )),
                `Left (`RadioButton(`id(`dis), `opt(`notify),
		    // Push button label (state of SCPM)
                    _("&Disabled") ))
            )),
	    `VSpacing(0.5)
        ))),
	`VSpacing(1),
	// frame label:
	`Frame(_("Settings"), `HBox(`HSpacing (),
	    `VBox(
		`VSpacing(0.5),
		`HBox(
		    // combobox label
		    `Left (`ComboBox (`id("switch_mode"), _("&Switch Mode"), [
			// switch mode
			`item (`id("normal"), _("Normal")),
			// switch mode
			`item (`id("force"), _("Save Changes")),
			// switch mode
			`item (`id("skip"), _("Drop Changes"))
		    ])),
		    `HSpacing (),
		    // combobox label
		    `ComboBox (`id("boot_mode"), _("B&oot Mode"), [
			// switch mode (combo box item)
			`item (`id("force"), _("Save Changes")),
			// switch mode (combo box item)
			`item (`id("skip"), _("Drop Changes"))
		    ])
		),
		`VSpacing (),
		`Left (`CheckBox(`id("verbose"),
		    // checkbox label
                    _("&Verbose Progress Messages"), conf["verbose"]:false)),
		`Left(`CheckBox(`id("debug"),
		    // checkbox label
                    _("&Log Debug Messages"), conf["debug"]:false)),
		`HBox (
		    `Left (`CheckBox(`id(`users_allowed),
			// checkbox label
			_("Allow Profile Management for Non-root &Users"),
			users_allowed)
		    ),
		    // pushbutton label
		    `PushButton (`id(`users), _("Co&nfigure..."))
		),
		`VSpacing(2)
	    ), `HSpacing ()
        )),
        `VSpacing(),
	//frame label
	`Frame (_("Resource Groups"), `HBox (`HSpacing (1), `VBox (
	    `VSpacing (0.6),
	    `RichText (`id (`rt_res), ""),
	    // button label
	    `Right (`PushButton(`id(`resources), _("&Configure...")))
	), `HSpacing (1))),
	`VSpacing(1)
	),
    `HSpacing(3));

    Wizard::SetContentsButtons (caption, contents, HELPS["main"]:"",
	Label::BackButton (), Label::FinishButton ());
    Wizard::RestoreAbortButton ();

    if (ProfileManager::enabled)
    {
        UI::ChangeWidget(`id(`rb_enabled), `CurrentButton, `ena);
    }
    else
    {
        UI::ChangeWidget(`id(`rb_enabled), `CurrentButton, `dis);
	UI::ChangeWidget(`id(`resources), `Enabled, false);
    }

    UI::ChangeWidget (`id("switch_mode"), `Value, conf["switch_mode"]:"normal");
    UI::ChangeWidget (`id("boot_mode"), `Value, conf["boot_mode"]:"force");

    // rich text label (list of groups follows)
    string active_rt	= sformat (_("<b>Active: </b>"));
    list<string> active_groups	= [];
    foreach (string name, map group, resource_groups, {
	if (group["active"]:false && group["what"]:"" != "deleted")
	    active_groups = add (active_groups, name);
    });
    if (active_groups == [])
	// rich text label (no group in the list)
	active_rt	= active_rt + _("none");
    else
	active_rt	= active_rt + mergestring (active_groups, ", ");
    UI::ChangeWidget (`id(`rt_res), `Value, active_rt);

    any ret = nil;
    while (true)
    {
	ret = UI::UserInput ();
	if (ret == `dis)
	{
	    UI::ChangeWidget(`id(`resources), `Enabled, false);
	    continue;
	}
	else if (ret == `ena)
	{
	    UI::ChangeWidget(`id(`resources), `Enabled, true);
	    continue;
	}
	else if (ret == `back || ret == `cancel || ret == `abort)
	{
	    if (Popup::ReallyAbort (ProfileManager::Modified ()))
		break;
	}
	else if (ret == `resources || ret == `next || ret == `users)
	{
	    // give control to sequencer
	    break;
	}
    };

    if (ret == `next || ret == `users || ret == `resources)
    {
	foreach (string key, any val, (map<string,any>) conf, {
	    conf[key]	= UI::QueryWidget (`id(key), `Value);
	});
	if (conf != ProfileManager::scpm_conf)
	{
	    ProfileManager::scpm_conf		= conf;
	    ProfileManager::conf_modified	= true;
	}
	users_allowed = (boolean) UI::QueryWidget (`id(`users_allowed), `Value);
	if (users_allowed != ProfileManager::users_allowed)
	{
	    ProfileManager::users_allowed	= users_allowed;
	    ProfileManager::users_modified	= true;
	}

	if (UI::QueryWidget(`id(`rb_enabled), `CurrentButton) == `ena)
	{
	    if (!ProfileManager::enabled)
	    {
		ProfileManager::enabled		= true;
		ProfileManager::status_modified	=
		    !ProfileManager::status_modified;
	    }
	}
	else
	{
	    if (ProfileManager::enabled)
	    {
		ProfileManager::enabled		= false;
		ProfileManager::status_modified	=
		    !ProfileManager::status_modified;
	    }
	}
	y2milestone ("enabled: %1, status modified: %2, conf modified: %3",
	    ProfileManager::enabled, ProfileManager::status_modified,
	    ProfileManager::conf_modified);
    }
    return ret;
}

/* EOF */
}
