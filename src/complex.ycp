/**
 * File:	include/profile-manager/complex.ycp
 * Package:	Configuration of profile-manager
 * Summary:	Dialogs definitions
 * Authors:	Jiri Suchomel <jsuchome@suse.cz>
 *
 * $Id$
 */

{

textdomain "profile-manager";

import "Wizard";
import "Wizard_hw";

//import "./ProfileManager";
import "ProfileManager";

include "ui/common_popups.ycp";
include "ui/common_messages.ycp";

//include "./helps.ycp";
//include "./routines.ycp";


include "profile-manager/helps.ycp";
include "profile-manager/routines.ycp";


/**
 * Return a modification status
 * @return true if data was modified
 */
global define boolean Modified() ``{
    return ProfileManager::Modified();
}


/**
 * Read settings dialog
 * @return `abort if aborted and `next otherwise
 */
global define symbol ReadDialog() ``{
    Wizard::RestoreHelp(HELPS["read"]:"");
    ProfileManager::AbortFunction = ``{ return PollAbort();};
    boolean ret = ProfileManager::Read();
    return ret ? `next : `abort;
}

/**
 * Write settings dialog
 * @return `abort if aborted and `next otherwise
 */
global define symbol WriteDialog() ``{
    Wizard::RestoreHelp(HELPS["write"]:"");
    ProfileManager::AbortFunction = ``{ return PollAbort();};
    boolean ret = ProfileManager::Write();
    return ret ? `next : `abort;
}



/**
 * Main dialog
 * @return any Returned value from UserInput() call
 */
global define any MainDialog () ``{
    string caption = _("System configuration profile management");

	map profiles = ProfileManager::profiles;
    string active = ProfileManager::active_profile;
    boolean enabled = ProfileManager::enabled;

	string state_label = (enabled)? _("SCPM is enabled with Resource Set \"")+ProfileManager::current_resources+"\"." : _("SCPM is disabled.");
    string selected = "";

    term contents = `HBox(
	`HSpacing(1.5),
	`VBox(
        `VSpacing(1),
        `Frame(_("Profile management"), `HBox(`HSpacing(1),
            `VBox(
                `VSpacing(0.2),
		        `Table(`id(`profiles),
                    `header(_("active"),
                            _("Name"),
                            _("Description")),
                    maplist (`name, `descr, profiles, ``{
                        if (name == active)
                            return `item(`id(name),"---->",name,descr);
                        else
                            return `item(`id(name),"",name,descr);
                    })
                    //                    ProfileManager::GetList(profiles, active)
                    ),
                `VSpacing(0.2),
		        `HBox(
		            `PushButton(`id(`add_button), _("&Add")),
		            `PushButton(`id(`edit_button), _("&Edit")),
		            `PushButton(`id(`delete_button), _("De&lete")),
                    `Right(
                        `PushButton(`id(`switch_button), _("&Switch to...")))
				    ),
                `VSpacing(0.2)
                ),
            `HSpacing(1)
                )),
        `VSpacing(1),
        `Frame(_("General Setup"), `VBox(`VSpacing(0.2),
            `HBox(
                `HSpacing(1),
			    `Label (state_label),
		        `Right(`PushButton(`id(`options_button), _("&Options"))),
                `HSpacing(1)
                ),
            `VSpacing(0.2))),
        `VSpacing(1)
		),
	`HSpacing(1.5));


    Wizard::SetContentsButtons ( caption,
				contents,
                HELPS["main"]:"",
				BackButtonLabel (),
				FinishButtonLabel () );

    if (ProfileManager::first_time)
        IntroductionPopup();

    UI::ChangeWidget(`id(`profiles), `CurrentItem, ProfileManager::active_profile);

    if (enabled)
        UI::SetFocus(`id(`profiles));
/*    else
        UI::SetFocus(`id(`options_button));*/

    UI::ChangeWidget(`id(`profiles), `Enabled, enabled);
    UI::ChangeWidget(`id(`add_button), `Enabled, enabled);
    UI::ChangeWidget(`id(`edit_button), `Enabled, enabled);
    UI::ChangeWidget(`id(`delete_button), `Enabled, enabled);
    UI::ChangeWidget(`id(`switch_button), `Enabled, enabled);


    any ret = nil;
    while (true)
    {
	ret = UI::UserInput ();
	if (ret == `abort)
	{
	    // TODO FIXME: check for change of the configuration
	    if ( UI::ReallyAbortPopup ( true ) )
		break;
	    else
		continue;
	}
	else if (ret == `delete_button)
	{
        selected = UI::QueryWidget(`id(`profiles), `CurrentItem);
        if (selected == active)
            UI::MessagePopup(_("You cannot delete the active profile."));
        else
        {
            if (UI::YesNoPopup(sformat(_("Do you really want to delete profile %1?"), selected)))
            {
                if (!ProfileManager::DeleteProfileFromMap(selected))
                    UI::ErrorPopup(_("Deleting profile was not succesfull.")); // spravny text !
                break;
            }
        }
		continue;
	}
    else if (ret == `add_button)
	{
		if (AddProfilePopup())
			return `edit_button;
		else continue;
	}
    else if (ret == `edit_button)
	{
        ProfileManager::selected_profile = UI::QueryWidget(`id(`profiles), `CurrentItem);
        ProfileManager::profile_action = "edit";
        break;
	}
    else if (ret == `switch_button)
    {
        selected = UI::QueryWidget(`id(`profiles), `CurrentItem);
        if (selected == active) {
            UI::MessagePopup(_("It does not make a sense to switch to the active profile."));
            continue;
        }
        else {
            ProfileManager::selected_profile = selected;
            ProfileManager::PrepareSwitch();
            ProgressPopup();
            break;
        }
    }
    else
    {
	    /* TODO FIXME: your code ... */
	    break;
	}

    };

    return ret;
}


/**
 */
global define any OptionsDialog () ``{

    string separator = "-----";
    list resource_sets = union( union (ProfileManager::resource_sets_predefined, [ separator ]), ProfileManager::resource_sets_individual);
    boolean close_popups = ProfileManager::close_popups;

    string caption = _("SCPM Options");
    term contents = `HBox(`HSpacing(1.5),
        `VBox(
        `VSpacing(1),
        `Frame(_("Enable SCPM"), `VBox(
            `VSpacing(0.5),
                `RadioButtonGroup(`id(`rb),
		            `HBox(
				    `HCenter(`RadioButton(`id(`ena), _("&Enabled") )),
                    `HCenter(`RadioButton(`id(`dis), _("&Disabled") ))
                    )
				 ),
		    `VSpacing(0.5)
            )),
        `VSpacing(1),
		`Frame(_("Resource Sets"), `VBox(
            `VSpacing(0.2),
            `HBox(
                `HSpacing(1),
                `SelectionBox(`id(`resources), _("Choose a &resource set:"), resource_sets),
//                `Left(`HSquash(`SelectionBox(`id(`resources), _("Choose a &resource set:"), resource_sets))),
                `HSpacing(1)
                ),
            `VSpacing(0.5)
            )),
        `VSpacing(1),
		`Frame(_("Other settings"), `VBox(
            `VSpacing(0.5),
            `HBox(
                `HSpacing(1),
		        `Left(`CheckBox(`id(`close_popups_ch), _("&Close progress popups automaticaly"), close_popups))
                ),
            `VSpacing(0.5)
            )),
		`VSpacing(1)),
        `HSpacing(1.5));

    Wizard::SetContentsButtons ( caption,
				contents,
	            HELPS["options"]:"",
				BackButtonLabel (),
				NextButtonLabel () );

    if (ProfileManager::enabled)
    {
        UI::ChangeWidget(`id(`rb), `CurrentButton, `ena);
        UI::ChangeWidget(`id(`resources), `CurrentItem, ProfileManager::current_resources);
    }
    else
        UI::ChangeWidget(`id(`rb), `CurrentButton, `dis);

    any ret = nil;
    while (true)
    {
	ret = UI::UserInput ();
	if (ret == `abort)
	{
	    // TODO FIXME: check for change of the configuration
	    if ( UI::ReallyAbortPopup ( true ) )
		break;
	    else
		continue;
	}
	else if (ret == `rb)
    {
        continue;
    }
    else if (ret == `next)
    {
        ProfileManager::close_popups = UI::QueryWidget(`id(`close_popups_ch), `Value);
        boolean run_progress = false;

        if (UI::QueryWidget(`id(`rb), `CurrentButton) == `ena) {

            string selected = UI::QueryWidget(`id(`resources), `CurrentItem);
            if (selected == separator || selected == nil)
            {
                UI::MessagePopup(_("You should choose a resource set first."));
                continue;
            }

            if (!ProfileManager::enabled)
            {
                ProfileManager::enabled = true;
                ProfileManager::WriteStatus();
                run_progress = true;
            }
            if (ProfileManager::current_resources != selected)
            {
                ProfileManager::current_resources = selected;
                ProfileManager::WriteResources(selected);
                run_progress = true;
            }
            if (run_progress) ProgressPopup();
        }
        else
        {
            if (ProfileManager::enabled)
            {
                ProfileManager::enabled = false;
                ProfileManager::current_resources = nil;
                ProfileManager::WriteStatus(); // show the progress bar ??
            }
        }

        y2debug("enabled=%1",ProfileManager::enabled);
        y2debug("close_popups=%1",ProfileManager::close_popups);
        y2debug("current_resources=%1",ProfileManager::current_resources);

	    break;
	}
    else if (ret == `back) break;

    else {
        y2error("Undefined return value");
        continue;
    }
    };

    return ret;
}

/**
 */
global define any ProfileSettingsDialog () ``{

    string edited = ProfileManager::selected_profile;
    string action = ProfileManager::profile_action;
    map profiles = ProfileManager::profiles;

    ProfileManager::GetProfile();

    map settings = ProfileManager::profile_settings;

    string caption = _("Special profile settings");
    term contents = `HBox(`HSpacing(1.5),
        `VBox(
        `VSpacing(1),
        `Frame(_("Special profile settings"), `HBox(`HSpacing(1),
            `VBox(
                `VSpacing(0.2),
                `TextEntry(`id(`name),_("Pro&file Name")),
                `VSpacing(0.2),
                `HBox(
                    `HSpacing(0.5), // proc???
                    `MultiLineEdit(`id(`desc),_("&Description")),
                    `HSpacing(0.5)
                    ),
                `VSpacing(0.2),
                `TextEntry(`id(`prestart),_("Pr&e Start Script")),
                `VSpacing(0.2),
                `TextEntry(`id(`poststart),_("P&ost Start Script")),
                `VSpacing(0.2),
                `TextEntry(`id(`prestop),_("P&re Stop Script")),
                `VSpacing(0.2),
                `TextEntry(`id(`poststop),_("Po&st Stop Script")),
                `VSpacing(0.2),
                `Left(`CheckBox(`id(`secure_ch),
                    _("Set file &permitions of all scripts secure (0700)."))),
                `VSpacing(0.2)
            ),
            `HSpacing(1))),
	    `VSpacing(1)),
        `HSpacing(1.5));


    Wizard::SetContentsButtons ( caption,
				contents,
                HELPS["profilesettings"]:"",
				BackButtonLabel (),
				NextButtonLabel () );

    UI::ChangeWidget(`id(`desc), `Value, lookup(settings,"description",""));
    UI::ChangeWidget(`id(`prestart), `Value, lookup(settings,"prestart",""));
    UI::ChangeWidget(`id(`poststart), `Value, lookup(settings,"poststart",""));
    UI::ChangeWidget(`id(`prestop), `Value, lookup(settings,"prestop",""));
    UI::ChangeWidget(`id(`poststop), `Value, lookup(settings,"poststop",""));
    if (action == "edit")
        UI::ChangeWidget(`id(`name), `Value, edited);

    any ret = nil;
    while (true)
    {
	ret = UI::UserInput ();
	if (ret == `abort)
	{
	    // TODO FIXME: check for change of the configuration
	    if ( UI::ReallyAbortPopup ( true ) )
		break;
	    else
		continue;
	}
	else if (ret == `back)
    {
        break;
    }
    else if (ret == `next)
	{
        boolean secure = UI::QueryWidget(`id(`secure_ch), `Value);
        string selected = UI::QueryWidget(`id(`name), `Value);

        if (!CheckValidName(selected))
        {
            UI::MessagePopup(_("You have to choose valid name."));
            continue;
        }

        settings = add (settings, "description", UI::QueryWidget(`id(`desc), `Value));

        if (action == "new")
        {
            if (lookup(profiles, selected, nil) != nil)
            {
                UI::MessagePopup(_("Profile with this name already exists"));
                continue;
            }
            ProfileManager::AddProfile(selected);
            // kontrola udaju
            ProfileManager::profile_settings = settings;
            ProfileManager::SetProfile(selected);
        }
        else if (action == "copy")
        {
            if (lookup(profiles, selected, nil) != nil)
            {
                UI::MessagePopup(_("Profile with this name already exists"));
                continue;
            }
            ProfileManager::CopyProfile(edited, selected);
            // kontrola udaju
            ProfileManager::profile_settings = settings;
            ProfileManager::SetProfile(selected);
        }
        else if (action == "edit")
        {
            if (selected != edited)
            {

                if (lookup(profiles, selected, nil) != nil)
                {
                    UI::MessagePopup(_("Profile with this name already exists"));
                    continue;
                }
                ProfileManager::RenameProfile(edited, selected); //rename =true
            }
//            if (modified) && ok
            ProfileManager::profile_settings = settings;
            ProfileManager::SetProfile(selected);
            break;
        }

	    break;
	}
    };

    return ret;
}


/* EOF */
}
